{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Serverseitige Softwareentwicklung PHP Grundlagen Arrays Superglobals Funktionen Objektorientierte Programmierung Sessions und Cookies Errors und Exceptions Arbeiten mit Datenbanken Quellcode einbinden Tutorials PHP Installation PHP Webserver PHP Konfiguration Arbeiten mit SQLite \u00dcbungstutorials \u00dcbungsblatt 1 - \u00dcbung 0 Mitwirkung Das gesamte Skriptum inkl. \u00dcbungen findet sich innerhalb eines GIT-Repositories auf der Plattform Github. \u00dcber sog. Pull-Requests k\u00f6nnen \u00c4nderungen am Inhalt durchgef\u00fchrt werden. Etwaige Rechtschreibfehler oder Grammatikfehler k\u00f6nnen nat\u00fcrlich gerne ausgebessert werden. \u00c4nderungsvorschl\u00e4ge und Erg\u00e4nzungen k\u00f6nnen auch gerne als Issue angegeben werden.","title":"Home"},{"location":"#serverseitige-softwareentwicklung","text":"","title":"Serverseitige Softwareentwicklung"},{"location":"#php","text":"Grundlagen Arrays Superglobals Funktionen Objektorientierte Programmierung Sessions und Cookies Errors und Exceptions Arbeiten mit Datenbanken Quellcode einbinden","title":"PHP"},{"location":"#tutorials","text":"PHP Installation PHP Webserver PHP Konfiguration Arbeiten mit SQLite","title":"Tutorials"},{"location":"#ubungstutorials","text":"\u00dcbungsblatt 1 - \u00dcbung 0","title":"\u00dcbungstutorials"},{"location":"#mitwirkung","text":"Das gesamte Skriptum inkl. \u00dcbungen findet sich innerhalb eines GIT-Repositories auf der Plattform Github. \u00dcber sog. Pull-Requests k\u00f6nnen \u00c4nderungen am Inhalt durchgef\u00fchrt werden. Etwaige Rechtschreibfehler oder Grammatikfehler k\u00f6nnen nat\u00fcrlich gerne ausgebessert werden. \u00c4nderungsvorschl\u00e4ge und Erg\u00e4nzungen k\u00f6nnen auch gerne als Issue angegeben werden.","title":"Mitwirkung"},{"location":"exercises/01/","text":"\u00dcbungsblatt 1 - \u00dcbung 0 Start \u00dcbung 0 ist eine \"einfache\" Vorbereitungs\u00fcbung zu den weiteren \u00dcbungen im \u00dcbungsblatt. Inhaltlich geht es um die Formularverarbeitung. Ausgangspunkt der \u00dcbung ist eine php-Datei mit folgendem Inhalt: <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\">Name:</label> <input name=\"name\" value=\"\"> <label for=\"message\">Ihr Anliegen:</label> <textarea name=\"message\" ></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Wird der PHP-Webserver im Root-Ordner des Projektes gestartet php -S localhost:9000 und die URL http://localhost:9000/ue0 im Web-Browser aufgerufen sollte die Ausgabe \u00e4hnlich aussehen: Dabei ist auff\u00e4llig, dass die Erfolgsnachricht bereits eingeblendet ist, obwohl das Formular nicht abgesendet wurde. Erfolgsmeldung konditional einblenden Die Erfolgsnachricht soll ausgeblendet werden und nur sichbar sein, wenn eine Variable $success als wahr interpretiert wird. Dazu wird im ersten Schritt die Variable $success erstellt und mit dem Wert false initialisiert. Dieser Wert soll sp\u00e4ter abge\u00e4ndert werden, wenn tats\u00e4chlich eine erfolgreiches Formular abgesendet wurde. Weiters wird eine if-Block um die Erfolgsmeldung gelegt. Wichtig dabei ist, dass der PHP-Block in zwei Teile aufgeteilt wird. Im ersten Teil befindet sich die Bedingung if (...) { mit \u00f6ffnendem { . Innerhalb des if-Block , also innerhalb der geschweiften Klammern ( { ... } ) befindet sich das HTML-Markup. Nachdem Markup wird der if-Block wieder geschlossen } . <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\">Name:</label> <input name=\"name\" value=\"\"> <label for=\"message\">Ihr Anliegen:</label> <textarea name=\"message\" ></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Mit diesem Schritt wird die Erfolgsmeldung erstmal ausgeblendet und wird nur eingeblendet, wenn die Variable $success wahr wird. Formular Verarbeitung Wird das Formular abgesendet, sowohl mit Inhalten oder auch leer \u00e4ndert sich nichts in der Antwort. Zumindest wenn beide Formularfelder (Name und Anliegen) angegeben wurden, soll die Erfolgsmeldung ausgegeben werden. Im ersten Schritt pr\u00fcfen wir, ob es sich um einen POST-Request handelt. Die verwendete Request-Methode findet man in der Superglobal S_SERVER \u00fcber den Schl\u00fcssel REQUEST_METHOD . In weiterer Folge soll gepr\u00fcft werden, ob die Formularfelder entsprechende Werte enthalten. Dazu kann die empty Funktion genutzt werden. Mit !empty($_POST['name']) bzw. !empty($_POST['message']) wird \u00fcberpr\u00fcft, ob die entsprechenden Formularfelder mit Inhalt belegt sind. <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { if ( ! empty ( $_POST [ 'name' ]) && ! empty ( $_POST [ 'message' ])) { $success = true ; } } ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\">Name:</label> <input name=\"name\" value=\"\"> <label for=\"message\">Ihr Anliegen:</label> <textarea name=\"message\" ></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Die \u00c4nderungen f\u00fchren dazu, dass ein ausgef\u00fclltes Formular die Erfolgsmeldung einblenden l\u00e4sst. Formular Validierung Ein Absenden eines leeren oder unvollst\u00e4ndigen Formulars zeigt noch keine Formularfehler an. Es w\u00e4re das Ziel die .error Klassen auf den HTML-Elementen label , input bzw. textarea bei entsprechenden nicht ausgef\u00fcllten Formularfeldern zu setzten. Es sollen deshalb 2 Variablen $error_name und $error_message erstellt werden. Diese Variablen bestimmen, ob die Klasse .error an den entsprechenden HTML-Elementen gesetzt wird. Dazu f\u00fcgen einen PHP-Block innerhalb des HTML-Attributes class ein: class=\"<?php echo $error_name ? 'error' : ''; ?>\" . Im PHP-Block wird ein tern\u00e4ter Operator genutzt um den Wert 'error' \u00fcber echo in Dokument zu schreiben, falls die Variable $error_name wahr ist. Falls nicht beide POST-Parmeter $_POST['name'] und $_POST['message'] gesetzt sind, werden die beiden Variablen $error_name bzw. $error_message entsprechend als true oder false gesetzt. <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; $error_name = false ; $error_message = false ; if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { if ( ! empty ( $_POST [ 'name' ]) && ! empty ( $_POST [ 'message' ])) { $success = true ; } else { $error_name = empty ( $_POST [ 'name' ]); $error_message = empty ( $_POST [ 'message' ]); } } ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\" class=\" <?php echo $error_name ? 'error' : '' ; ?> \">Name:</label> <input name=\"name\" value=\"\" class=\" <?php echo $error_name ? 'error' : '' ; ?> \"> <label for=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \">Ihr Anliegen:</label> <textarea name=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \"></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Formular Usability Der letzte Feinschliff f\u00fcr das Formular liegt darin, dass beim Absenden eines fehlerhaften Formulars mit nur einem Fehler, der zweite (jedoch korrekte) Formularwert nicht \u00fcbernommen bleibt. Siehe dazu den unten angef\u00fcgten Screenshot. Das Anliegen wurde korrekt eingegeben, wird jedoch nicht \u00fcbernommen und m\u00fcsste erneut eingegeben werden: <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; $error_name = false ; $error_message = false ; $name = \"\" ; $message = \"\" ; if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { if ( ! empty ( $_POST [ 'name' ]) && ! empty ( $_POST [ 'message' ])) { $success = true ; } else { $error_name = empty ( $_POST [ 'name' ]); $error_message = empty ( $_POST [ 'message' ]); $name = $_POST [ 'name' ]; $message = $_POST [ 'message' ]; } } ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\" class=\" <?php echo $error_name ? 'error' : '' ; ?> \">Name:</label> <input name=\"name\" value=\" <?php echo $name ; ?> \" class=\" <?php echo $error_name ? 'error' : '' ; ?> \"> <label for=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \">Ihr Anliegen:</label> <textarea name=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \"> <?php echo $message ; ?> </textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Die oben angef\u00fchrten \u00c4nderungen f\u00fchren nun dazu, dass auch die Formular Usability entsprechend unterst\u00fctzt wird. Dies wird im unten angef\u00fchrten Screenshot deutlich:","title":"\u00dcbungsblatt 1 - \u00dcbung 0"},{"location":"exercises/01/#ubungsblatt-1-ubung-0","text":"","title":"\u00dcbungsblatt 1 - \u00dcbung 0"},{"location":"exercises/01/#start","text":"\u00dcbung 0 ist eine \"einfache\" Vorbereitungs\u00fcbung zu den weiteren \u00dcbungen im \u00dcbungsblatt. Inhaltlich geht es um die Formularverarbeitung. Ausgangspunkt der \u00dcbung ist eine php-Datei mit folgendem Inhalt: <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\">Name:</label> <input name=\"name\" value=\"\"> <label for=\"message\">Ihr Anliegen:</label> <textarea name=\"message\" ></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Wird der PHP-Webserver im Root-Ordner des Projektes gestartet php -S localhost:9000 und die URL http://localhost:9000/ue0 im Web-Browser aufgerufen sollte die Ausgabe \u00e4hnlich aussehen: Dabei ist auff\u00e4llig, dass die Erfolgsnachricht bereits eingeblendet ist, obwohl das Formular nicht abgesendet wurde.","title":"Start"},{"location":"exercises/01/#erfolgsmeldung-konditional-einblenden","text":"Die Erfolgsnachricht soll ausgeblendet werden und nur sichbar sein, wenn eine Variable $success als wahr interpretiert wird. Dazu wird im ersten Schritt die Variable $success erstellt und mit dem Wert false initialisiert. Dieser Wert soll sp\u00e4ter abge\u00e4ndert werden, wenn tats\u00e4chlich eine erfolgreiches Formular abgesendet wurde. Weiters wird eine if-Block um die Erfolgsmeldung gelegt. Wichtig dabei ist, dass der PHP-Block in zwei Teile aufgeteilt wird. Im ersten Teil befindet sich die Bedingung if (...) { mit \u00f6ffnendem { . Innerhalb des if-Block , also innerhalb der geschweiften Klammern ( { ... } ) befindet sich das HTML-Markup. Nachdem Markup wird der if-Block wieder geschlossen } . <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\">Name:</label> <input name=\"name\" value=\"\"> <label for=\"message\">Ihr Anliegen:</label> <textarea name=\"message\" ></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Mit diesem Schritt wird die Erfolgsmeldung erstmal ausgeblendet und wird nur eingeblendet, wenn die Variable $success wahr wird.","title":"Erfolgsmeldung konditional einblenden"},{"location":"exercises/01/#formular-verarbeitung","text":"Wird das Formular abgesendet, sowohl mit Inhalten oder auch leer \u00e4ndert sich nichts in der Antwort. Zumindest wenn beide Formularfelder (Name und Anliegen) angegeben wurden, soll die Erfolgsmeldung ausgegeben werden. Im ersten Schritt pr\u00fcfen wir, ob es sich um einen POST-Request handelt. Die verwendete Request-Methode findet man in der Superglobal S_SERVER \u00fcber den Schl\u00fcssel REQUEST_METHOD . In weiterer Folge soll gepr\u00fcft werden, ob die Formularfelder entsprechende Werte enthalten. Dazu kann die empty Funktion genutzt werden. Mit !empty($_POST['name']) bzw. !empty($_POST['message']) wird \u00fcberpr\u00fcft, ob die entsprechenden Formularfelder mit Inhalt belegt sind. <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { if ( ! empty ( $_POST [ 'name' ]) && ! empty ( $_POST [ 'message' ])) { $success = true ; } } ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\">Name:</label> <input name=\"name\" value=\"\"> <label for=\"message\">Ihr Anliegen:</label> <textarea name=\"message\" ></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Die \u00c4nderungen f\u00fchren dazu, dass ein ausgef\u00fclltes Formular die Erfolgsmeldung einblenden l\u00e4sst.","title":"Formular Verarbeitung"},{"location":"exercises/01/#formular-validierung","text":"Ein Absenden eines leeren oder unvollst\u00e4ndigen Formulars zeigt noch keine Formularfehler an. Es w\u00e4re das Ziel die .error Klassen auf den HTML-Elementen label , input bzw. textarea bei entsprechenden nicht ausgef\u00fcllten Formularfeldern zu setzten. Es sollen deshalb 2 Variablen $error_name und $error_message erstellt werden. Diese Variablen bestimmen, ob die Klasse .error an den entsprechenden HTML-Elementen gesetzt wird. Dazu f\u00fcgen einen PHP-Block innerhalb des HTML-Attributes class ein: class=\"<?php echo $error_name ? 'error' : ''; ?>\" . Im PHP-Block wird ein tern\u00e4ter Operator genutzt um den Wert 'error' \u00fcber echo in Dokument zu schreiben, falls die Variable $error_name wahr ist. Falls nicht beide POST-Parmeter $_POST['name'] und $_POST['message'] gesetzt sind, werden die beiden Variablen $error_name bzw. $error_message entsprechend als true oder false gesetzt. <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; $error_name = false ; $error_message = false ; if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { if ( ! empty ( $_POST [ 'name' ]) && ! empty ( $_POST [ 'message' ])) { $success = true ; } else { $error_name = empty ( $_POST [ 'name' ]); $error_message = empty ( $_POST [ 'message' ]); } } ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\" class=\" <?php echo $error_name ? 'error' : '' ; ?> \">Name:</label> <input name=\"name\" value=\"\" class=\" <?php echo $error_name ? 'error' : '' ; ?> \"> <label for=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \">Ihr Anliegen:</label> <textarea name=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \"></textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html>","title":"Formular Validierung"},{"location":"exercises/01/#formular-usability","text":"Der letzte Feinschliff f\u00fcr das Formular liegt darin, dass beim Absenden eines fehlerhaften Formulars mit nur einem Fehler, der zweite (jedoch korrekte) Formularwert nicht \u00fcbernommen bleibt. Siehe dazu den unten angef\u00fcgten Screenshot. Das Anliegen wurde korrekt eingegeben, wird jedoch nicht \u00fcbernommen und m\u00fcsste erneut eingegeben werden: <!DOCTYPE html> <html> <head> <title>\u00dcbungsblatt 1 - \u00dcbung 0</title> <style> .success {background: green;padding: 10px 5px; color: #fff;} label.error {color: red;} input.error, textarea.error {border: 1px solid red;} label, input, textarea {display: block;} </style> </head> <body> <h1>Kontaktformular</h1> <?php $success = false ; $error_name = false ; $error_message = false ; $name = \"\" ; $message = \"\" ; if ( $_SERVER [ 'REQUEST_METHOD' ] == 'POST' ) { if ( ! empty ( $_POST [ 'name' ]) && ! empty ( $_POST [ 'message' ])) { $success = true ; } else { $error_name = empty ( $_POST [ 'name' ]); $error_message = empty ( $_POST [ 'message' ]); $name = $_POST [ 'name' ]; $message = $_POST [ 'message' ]; } } ?> <?php if ( $success ) { ?> <div class=\"success\">Vielen Dank f\u00fcr die Kontaktaufnahme!</div> <?php } ?> <form method=\"post\" action=\"/ue0/index.php\"> <label for=\"name\" class=\" <?php echo $error_name ? 'error' : '' ; ?> \">Name:</label> <input name=\"name\" value=\" <?php echo $name ; ?> \" class=\" <?php echo $error_name ? 'error' : '' ; ?> \"> <label for=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \">Ihr Anliegen:</label> <textarea name=\"message\" class=\" <?php echo $error_message ? 'error' : '' ; ?> \"> <?php echo $message ; ?> </textarea> <input type=\"submit\" value=\"Absenden\"> </form> </body> </html> Die oben angef\u00fchrten \u00c4nderungen f\u00fchren nun dazu, dass auch die Formular Usability entsprechend unterst\u00fctzt wird. Dies wird im unten angef\u00fchrten Screenshot deutlich:","title":"Formular Usability"},{"location":"php/01/","text":"Grundlagen Erstes Beispiel PHP-Code wird innerhalb einer Textdatei mit Suffix .php geschrieben. PHP-Skripte beginnen mit dem sog. PHP-Tag <?php . Falls die Textdatei noch weitere Inhalte (zB HTML) enth\u00e4lt kann PHP-Code auch Blockweise eingef\u00fcgt werden, daf\u00fcr m\u00fcssen Bl\u00f6cke mit <?php ge\u00f6ffnet und ?> beendet werden. Jede Anweisungszeile in PHP muss mit einem Semikolon ( ; ) abgeschlossen werden. Ausgaben werden \u00fcber den echo Befehl durchgef\u00fchrt. <?php echo \"Hallo PHP!\" ; PHP kann als Skript \u00fcber den PHP-Interpreter auf der Kommandozeile ausgef\u00fchrt werden. Dazu wird der PHP-Interpreter auf der Kommondozeile ausgef\u00fchrt und das auszuf\u00fchrende Skript wird als Argument an den Interpreter \u00fcbergeben: > php example.php Hallo PHP! PHP in HTML einbetten PHP kann innerhalb eines HTML-Dokuments eingebettet werden. Die Quellcode-Datei muss mit dem Suffix .php abgespeichert werden, sodass der PHP-Interpreter die Datei verarbeitet. PHP-Code wird innerhalb von PHP-Tags <?php und ?> eingef\u00fcgt. Der PHP-Code wird am Web-Server verarbeitet und nicht an den Web-Client gesendet. <html> <head> <title>Hallo PHP</title> </head> <body> <?php // Ein Kommentar: Dieser wird nicht ins HTML geschrieben echo \"Hallo PHP!\" ; ?> </body> </html> Kommentare Im PHP-Quellcode k\u00f6nnen nat\u00fcrlich auch Kommentare eingef\u00fcgt werden. Es gibt einzeilige- und mehrzeilige Kommentare: <?php // einzeiliger Kommentar # auch ein einzeiliger Kommentar /* mehrzeiliger Kommentar ... */ Variablen Eine Variable in PHP wird mit $ -Zeichen eingeleitet und es folgt ein Variablenbezeichner. Folgende weitere Regeln sind zu beachten: Ein Variablenname muss mit einem Buchstaben oder Unterstrich starten Ab der zweiten Stelle kann ein Variablenname auch Zahlen enthalten Variablennamen sind case-sensitive ( $var und $VAR sind verschiedene Varialben) <?php $my_var = 123 ; $message = \"hello world\" ; Datentypen PHP ist eine dynamisch Typisierte Sprache. Das bedeutet es m\u00fcssen keine Datentypen f\u00fcr Variablen angegeben werden, diese werden vom PHP-Interpreter abgeleitet. Dennoch legt PHP 10 verschiedene Datentypen fest, welche einer Variable implizit entsprechen. Einfache Datentypen: boolean , integer , float und string Zusammengesetzte Datentypen: array , object , iterable und callable Spezielle Datentypen: resource , NULL Die Funktion var_dump kann verwendet werden um den Wert und den Datentyp einer Variable auszugeben. Dies ist hilfreich f\u00fcr das Debugging: <?php $a = 3.1 ; $b = true ; var_dump ( $a ); // float(3.1) var_dump ( $b ); // bool(true) Boolean Generell interpretiert PHP alles als true au\u00dfer: den boolschen Wert false die Zahlen 0 , -0 , 0.0 , -0.0 den Leerstring \"\" und \"0\" ein leeres Array [] NULL Casting PHP unterst\u00fctzt f\u00fcr jeden Datentyp und weitere F\u00e4lle eine is_* Funktion. Es kann zB mit der Funktion is_int gepr\u00fcft werden, ob eine Variable dem Datentyp integer entspricht. <?php $a = \"abc\" ; $b = 123 ; echo is_null ( $a ); // false echo is_string ( $a ); // true echo is_float ( $b ) // false Es kann der Datentyp einer Variable durch Casting explizit ver\u00e4ndert werden: <?php $var1 = 10 ; $var2 = ( bool ) $var1 ; var_dump ( $var2 ) // bool(true) Folgende Casting Operationen sind definiert: (int) , (integer) in Integer casten (bool) , (boolean) in Boolean casten (float) , (double) , (real) in Float casten (string) in String casten (array) in Array casten (object) in Objekt casten Operatoren PHP verf\u00fcgt \u00fcber alle g\u00e4ngigen Operatoren, wie sie aus anderen Programmiersprachen bekannt sind. Einige wichtige Erg\u00e4nzungen: Operator Bezeichnung . String Konkatenation ?? Null-Coalesing Operator ?: Elvis Operator <=> Spaceship Operator === Vergleichsoperator: Wert und Datentyp String Konkatenation <?php $str = \"abc\" ; $res = $str . \"-\" . \"def\" ; echo $res ; // abc-def Null-Coalesing Operator Zuweisung eines Default-Wertes f\u00fcr eine Variable. Der erste Wert der existiert und nicht NULL ist. Im Beispiel ist $z nicht definiert, $a hat den Wert NULL und $b den Wert 10 . Die Null-Coalesing Kette wird solange durchgef\u00fchrt bis ein g\u00fcltiger Wert gefunden wird. <?php $a = NULL ; $b = 10 ; $c = $z ?? $a ?? $b ; echo $c ; // 10 Elvis Operator Der Elvis Operator ist eine Vereinfachung des bekannten tern\u00e4ren Operators: linker Ausdruck ?: rechter Ausdruck . Die Logik ist dabei so gestaltet, dass wenn der linke Ausdruck als wahr interpretiert wird, dieser zur\u00fcckgegeben wird ansonsten der rechte Ausdruck (als Alternative). <?php $a = 5 ?: 10 ; $b = 0 ?: 10 ; echo $a ; // 5 echo $b ; // 10 Spaceship Operator Der Spaceship Operator ist ein spezieller Operator um Ausdr\u00fccke zu vergleichen. Dieser gibt die Werte -1 , 0 oder 1 zur\u00fcck, jenachdem ob der erste Ausdruck kleiner, gleich oder gr\u00f6\u00dfer als der zweite Audruck ist. Der Spaceship Operator kann auch f\u00fcr Strings verwendet werden: <?php echo 1 <=> 1 ; // 0 echo 1 <=> 0 ; // 1 echo 0 <=> 1 ; // -1 echo \"a\" <=> \"a\" ; // 0 echo \"z\" <=> \"a\" ; // 1 echo \"a\" <=> \"z\" ; // -1 Vergleichsoperator Generell sind 2 Vergleichsoperatoren zu unterscheiden == und === . Erster untersucht nur ob zwei Werte identisch sind, so w\u00e4re \"5\" == 5 wahr. Der zweite Vergleichoperator untersucht jedoch auch, ob die 2 Operanden den selben Datentyp haben, somit w\u00e4re \"5\" === 5 falsch. Bedingte Ausdr\u00fccke <?php $var = 10 if ( $var == 5 ) { echo \"Der Wert ist 5\" ; } elseif ( $var < 5 ) { echo \"Der Wert ist kleiner als 5\" ; } else { echo \"Der Wert ist gr\u00f6\u00dfer als 5\" ; } PHP verf\u00fcgt auch \u00fcber einen switch -Ausdruck, dieser kann in der PHP-Dokumentation nachgelesen werden.","title":"Grundlagen"},{"location":"php/01/#grundlagen","text":"","title":"Grundlagen"},{"location":"php/01/#erstes-beispiel","text":"PHP-Code wird innerhalb einer Textdatei mit Suffix .php geschrieben. PHP-Skripte beginnen mit dem sog. PHP-Tag <?php . Falls die Textdatei noch weitere Inhalte (zB HTML) enth\u00e4lt kann PHP-Code auch Blockweise eingef\u00fcgt werden, daf\u00fcr m\u00fcssen Bl\u00f6cke mit <?php ge\u00f6ffnet und ?> beendet werden. Jede Anweisungszeile in PHP muss mit einem Semikolon ( ; ) abgeschlossen werden. Ausgaben werden \u00fcber den echo Befehl durchgef\u00fchrt. <?php echo \"Hallo PHP!\" ; PHP kann als Skript \u00fcber den PHP-Interpreter auf der Kommandozeile ausgef\u00fchrt werden. Dazu wird der PHP-Interpreter auf der Kommondozeile ausgef\u00fchrt und das auszuf\u00fchrende Skript wird als Argument an den Interpreter \u00fcbergeben: > php example.php Hallo PHP!","title":"Erstes Beispiel"},{"location":"php/01/#php-in-html-einbetten","text":"PHP kann innerhalb eines HTML-Dokuments eingebettet werden. Die Quellcode-Datei muss mit dem Suffix .php abgespeichert werden, sodass der PHP-Interpreter die Datei verarbeitet. PHP-Code wird innerhalb von PHP-Tags <?php und ?> eingef\u00fcgt. Der PHP-Code wird am Web-Server verarbeitet und nicht an den Web-Client gesendet. <html> <head> <title>Hallo PHP</title> </head> <body> <?php // Ein Kommentar: Dieser wird nicht ins HTML geschrieben echo \"Hallo PHP!\" ; ?> </body> </html>","title":"PHP in HTML einbetten"},{"location":"php/01/#kommentare","text":"Im PHP-Quellcode k\u00f6nnen nat\u00fcrlich auch Kommentare eingef\u00fcgt werden. Es gibt einzeilige- und mehrzeilige Kommentare: <?php // einzeiliger Kommentar # auch ein einzeiliger Kommentar /* mehrzeiliger Kommentar ... */","title":"Kommentare"},{"location":"php/01/#variablen","text":"Eine Variable in PHP wird mit $ -Zeichen eingeleitet und es folgt ein Variablenbezeichner. Folgende weitere Regeln sind zu beachten: Ein Variablenname muss mit einem Buchstaben oder Unterstrich starten Ab der zweiten Stelle kann ein Variablenname auch Zahlen enthalten Variablennamen sind case-sensitive ( $var und $VAR sind verschiedene Varialben) <?php $my_var = 123 ; $message = \"hello world\" ;","title":"Variablen"},{"location":"php/01/#datentypen","text":"PHP ist eine dynamisch Typisierte Sprache. Das bedeutet es m\u00fcssen keine Datentypen f\u00fcr Variablen angegeben werden, diese werden vom PHP-Interpreter abgeleitet. Dennoch legt PHP 10 verschiedene Datentypen fest, welche einer Variable implizit entsprechen. Einfache Datentypen: boolean , integer , float und string Zusammengesetzte Datentypen: array , object , iterable und callable Spezielle Datentypen: resource , NULL Die Funktion var_dump kann verwendet werden um den Wert und den Datentyp einer Variable auszugeben. Dies ist hilfreich f\u00fcr das Debugging: <?php $a = 3.1 ; $b = true ; var_dump ( $a ); // float(3.1) var_dump ( $b ); // bool(true)","title":"Datentypen"},{"location":"php/01/#boolean","text":"Generell interpretiert PHP alles als true au\u00dfer: den boolschen Wert false die Zahlen 0 , -0 , 0.0 , -0.0 den Leerstring \"\" und \"0\" ein leeres Array [] NULL","title":"Boolean"},{"location":"php/01/#casting","text":"PHP unterst\u00fctzt f\u00fcr jeden Datentyp und weitere F\u00e4lle eine is_* Funktion. Es kann zB mit der Funktion is_int gepr\u00fcft werden, ob eine Variable dem Datentyp integer entspricht. <?php $a = \"abc\" ; $b = 123 ; echo is_null ( $a ); // false echo is_string ( $a ); // true echo is_float ( $b ) // false Es kann der Datentyp einer Variable durch Casting explizit ver\u00e4ndert werden: <?php $var1 = 10 ; $var2 = ( bool ) $var1 ; var_dump ( $var2 ) // bool(true) Folgende Casting Operationen sind definiert: (int) , (integer) in Integer casten (bool) , (boolean) in Boolean casten (float) , (double) , (real) in Float casten (string) in String casten (array) in Array casten (object) in Objekt casten","title":"Casting"},{"location":"php/01/#operatoren","text":"PHP verf\u00fcgt \u00fcber alle g\u00e4ngigen Operatoren, wie sie aus anderen Programmiersprachen bekannt sind. Einige wichtige Erg\u00e4nzungen: Operator Bezeichnung . String Konkatenation ?? Null-Coalesing Operator ?: Elvis Operator <=> Spaceship Operator === Vergleichsoperator: Wert und Datentyp","title":"Operatoren"},{"location":"php/01/#string-konkatenation","text":"<?php $str = \"abc\" ; $res = $str . \"-\" . \"def\" ; echo $res ; // abc-def","title":"String Konkatenation"},{"location":"php/01/#null-coalesing-operator","text":"Zuweisung eines Default-Wertes f\u00fcr eine Variable. Der erste Wert der existiert und nicht NULL ist. Im Beispiel ist $z nicht definiert, $a hat den Wert NULL und $b den Wert 10 . Die Null-Coalesing Kette wird solange durchgef\u00fchrt bis ein g\u00fcltiger Wert gefunden wird. <?php $a = NULL ; $b = 10 ; $c = $z ?? $a ?? $b ; echo $c ; // 10","title":"Null-Coalesing Operator"},{"location":"php/01/#elvis-operator","text":"Der Elvis Operator ist eine Vereinfachung des bekannten tern\u00e4ren Operators: linker Ausdruck ?: rechter Ausdruck . Die Logik ist dabei so gestaltet, dass wenn der linke Ausdruck als wahr interpretiert wird, dieser zur\u00fcckgegeben wird ansonsten der rechte Ausdruck (als Alternative). <?php $a = 5 ?: 10 ; $b = 0 ?: 10 ; echo $a ; // 5 echo $b ; // 10","title":"Elvis Operator"},{"location":"php/01/#spaceship-operator","text":"Der Spaceship Operator ist ein spezieller Operator um Ausdr\u00fccke zu vergleichen. Dieser gibt die Werte -1 , 0 oder 1 zur\u00fcck, jenachdem ob der erste Ausdruck kleiner, gleich oder gr\u00f6\u00dfer als der zweite Audruck ist. Der Spaceship Operator kann auch f\u00fcr Strings verwendet werden: <?php echo 1 <=> 1 ; // 0 echo 1 <=> 0 ; // 1 echo 0 <=> 1 ; // -1 echo \"a\" <=> \"a\" ; // 0 echo \"z\" <=> \"a\" ; // 1 echo \"a\" <=> \"z\" ; // -1","title":"Spaceship Operator"},{"location":"php/01/#vergleichsoperator","text":"Generell sind 2 Vergleichsoperatoren zu unterscheiden == und === . Erster untersucht nur ob zwei Werte identisch sind, so w\u00e4re \"5\" == 5 wahr. Der zweite Vergleichoperator untersucht jedoch auch, ob die 2 Operanden den selben Datentyp haben, somit w\u00e4re \"5\" === 5 falsch.","title":"Vergleichsoperator"},{"location":"php/01/#bedingte-ausdrucke","text":"<?php $var = 10 if ( $var == 5 ) { echo \"Der Wert ist 5\" ; } elseif ( $var < 5 ) { echo \"Der Wert ist kleiner als 5\" ; } else { echo \"Der Wert ist gr\u00f6\u00dfer als 5\" ; } PHP verf\u00fcgt auch \u00fcber einen switch -Ausdruck, dieser kann in der PHP-Dokumentation nachgelesen werden.","title":"Bedingte Ausdr\u00fccke"},{"location":"php/02/","text":"Arbeiten mit Arrays PHP bietet Index-basierte, assoziative bzw. mehrdimensionale Arrays. Das Arbeiten mit Arrays gestaltet sich grunds\u00e4tzlich einfach. Im folgenden sollen die wichtigsten Aspekte zum Arbeiten mit Arrays in PHP eingef\u00fchrt werden. Erzeugung eines leeren Arrays <?php $mein_array = []; Erzeugung von Arrays mit Inhalten Wird kein Schl\u00fcssel angegeben werden Inhalte indexiert. Auch mehrdimensionale Inhalte k\u00f6nnen hinzugef\u00fcgt werden: <?php $index_array = [ 'index 0' , 123 , [ 'mehr' , 'dimensional' ] ]; Assoziative Arrays werden \u00fcber Schl\u00fcssel/Wert Paare erzeugt: <?php $assoziatives_array = [ 'ein_schl\u00fcssel' => 123 , 'anderer_key' => 456 ]; Es k\u00f6nnen ohne weiters Index-basierte und assoziative Arrays gemischt werden: <?php $array = [ 'ein_schl\u00fcssel' => 123 , 123 , 'anderer wert' ]; Zugriff auf Array-Elemente <?php $array = [ 'ein_schl\u00fcssel' => 123 , 456 , 'anderer wert' ]; echo $array [ 0 ] . \" \\n \" ; echo $array [ 1 ] . \" \\n \" ; echo $array [ 'ein_schl\u00fcssel' ] . \" \\n \" ; echo count ( $array ); Bei einer Mischung von Index-basierten und assoziativen Elementen, z\u00e4hlen die assoziativen Elemente nicht zu den Indizes jedoch zur L\u00e4nge des Arrays. Dies muss f\u00fcr For-Schleifen beachtet werden. Die Ausgabe des Skripts sieht wie folgt aus: 456 anderer wert 123 3 Arrays ver\u00e4ndern Neue Elemente k\u00f6nnen mittels einer leicht abgewandelten Zuweisungsoperation am Ende hinzugef\u00fcgt werden. Dazu muss die Variable mit dem Suffix [] ausgestattet werden. <?php $array = []; $array [] = 'index 0' ; $array [] = 'n\u00e4chster Eintrag' ; Ebenfalls kann eine Array-Position mittels Index bzw. Schl\u00fcssel angesprochen werden. Falls ein Index oder Schl\u00fcssel noch nicht besteht wird dieser neu hinzugef\u00fcgt ansonsten abge\u00e4ndert: <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ; Iteration durch Arrays F\u00fcr die Iteration k\u00f6nnen Schleifen verwendet werden. Dazu k\u00f6nnen bekannte For-Schleifen, While-Schleifen oder Do-While-Schleifen verwendet werden. Neben diesen Varianten gibt es f\u00fcr PHP auch eine eigene Foreach-Schleife. <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ; foreach ( $array as $value ) { echo $value . \" \\n \" ; } foreach ( $array as $key => $value ) { echo $key . \": \" . $value . \" \\n \" ; } Die Foreach-Schleife iteriert durch jedes Element aus dem Array (Index-basierte sowohl assoziative). Durch das syntaktische Konstrukt $key => $value kann zu jedem Element auch der Index bzw. Schl\u00fcssel abgefragt werden. Siehe dazu die Schleifenbeispiele oben. Die Ausgabe zum Skript sieht folgenderma\u00dfen aus: index 0 n \u00e4 chster Eintrag 0 : index 0 next key : n \u00e4 chster Eintrag Wichtige Array Funktionen Elemente z\u00e4hlen Mit der Funktion count oder sizeof (als Alias) kann die Anzahl der Elemente in einem Array gez\u00e4hlt werden: <?php $arr = [ \"hello\" , \"array\" , \"count\" ]; echo count ( $arr ); // 3 echo sizeof ( $arr ); // 3 Existenz pr\u00fcfen Mit der Funktion isset kann gepr\u00fcft werden, ob ein Index oder Schl\u00fcssel eines Arrays gesetzt ist (bzw. existiert). Ein Zugriff auf einen undefinierten Schl\u00fcssel oder Index w\u00fcrde zu einem Fehler f\u00fchren. <?php $arr = [ 'key1' => 'value1' , 'key2' => 'value2' ]; if ( isset ( $arr [ 'key1' ])) { echo \"key1 ist gesetzt\" ; } else { echo \"key1 ist nicht gesetzt\" ; } if ( isset ( $arr [ 'key_xyz' ])) { echo \"key_xyz ist gesetzt\" ; } else { echo \"key_xyz ist nicht gesetzt\" ; } // Ausgabe des Skripts: // key1 ist gesetzt // key_xyz ist nicht gesetzt Element l\u00f6schen Die Funktion unset kann verwendet werden um einzelne Elemente eines Arrays zu l\u00f6schen. <?php $arr = [ \"a\" => \"a value\" , \"b\" => \"b value\" ]; echo count ( $arr ) . \" \\n \" ; // 2 unset ( $arr [ \"a\" ]); echo count ( $arr ) . \" \\n \" ; // 1","title":"Arrays"},{"location":"php/02/#arbeiten-mit-arrays","text":"PHP bietet Index-basierte, assoziative bzw. mehrdimensionale Arrays. Das Arbeiten mit Arrays gestaltet sich grunds\u00e4tzlich einfach. Im folgenden sollen die wichtigsten Aspekte zum Arbeiten mit Arrays in PHP eingef\u00fchrt werden.","title":"Arbeiten mit Arrays"},{"location":"php/02/#erzeugung-eines-leeren-arrays","text":"<?php $mein_array = [];","title":"Erzeugung eines leeren Arrays"},{"location":"php/02/#erzeugung-von-arrays-mit-inhalten","text":"Wird kein Schl\u00fcssel angegeben werden Inhalte indexiert. Auch mehrdimensionale Inhalte k\u00f6nnen hinzugef\u00fcgt werden: <?php $index_array = [ 'index 0' , 123 , [ 'mehr' , 'dimensional' ] ]; Assoziative Arrays werden \u00fcber Schl\u00fcssel/Wert Paare erzeugt: <?php $assoziatives_array = [ 'ein_schl\u00fcssel' => 123 , 'anderer_key' => 456 ]; Es k\u00f6nnen ohne weiters Index-basierte und assoziative Arrays gemischt werden: <?php $array = [ 'ein_schl\u00fcssel' => 123 , 123 , 'anderer wert' ];","title":"Erzeugung von Arrays mit Inhalten"},{"location":"php/02/#zugriff-auf-array-elemente","text":"<?php $array = [ 'ein_schl\u00fcssel' => 123 , 456 , 'anderer wert' ]; echo $array [ 0 ] . \" \\n \" ; echo $array [ 1 ] . \" \\n \" ; echo $array [ 'ein_schl\u00fcssel' ] . \" \\n \" ; echo count ( $array ); Bei einer Mischung von Index-basierten und assoziativen Elementen, z\u00e4hlen die assoziativen Elemente nicht zu den Indizes jedoch zur L\u00e4nge des Arrays. Dies muss f\u00fcr For-Schleifen beachtet werden. Die Ausgabe des Skripts sieht wie folgt aus: 456 anderer wert 123 3","title":"Zugriff auf Array-Elemente"},{"location":"php/02/#arrays-verandern","text":"Neue Elemente k\u00f6nnen mittels einer leicht abgewandelten Zuweisungsoperation am Ende hinzugef\u00fcgt werden. Dazu muss die Variable mit dem Suffix [] ausgestattet werden. <?php $array = []; $array [] = 'index 0' ; $array [] = 'n\u00e4chster Eintrag' ; Ebenfalls kann eine Array-Position mittels Index bzw. Schl\u00fcssel angesprochen werden. Falls ein Index oder Schl\u00fcssel noch nicht besteht wird dieser neu hinzugef\u00fcgt ansonsten abge\u00e4ndert: <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ;","title":"Arrays ver\u00e4ndern"},{"location":"php/02/#iteration-durch-arrays","text":"F\u00fcr die Iteration k\u00f6nnen Schleifen verwendet werden. Dazu k\u00f6nnen bekannte For-Schleifen, While-Schleifen oder Do-While-Schleifen verwendet werden. Neben diesen Varianten gibt es f\u00fcr PHP auch eine eigene Foreach-Schleife. <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ; foreach ( $array as $value ) { echo $value . \" \\n \" ; } foreach ( $array as $key => $value ) { echo $key . \": \" . $value . \" \\n \" ; } Die Foreach-Schleife iteriert durch jedes Element aus dem Array (Index-basierte sowohl assoziative). Durch das syntaktische Konstrukt $key => $value kann zu jedem Element auch der Index bzw. Schl\u00fcssel abgefragt werden. Siehe dazu die Schleifenbeispiele oben. Die Ausgabe zum Skript sieht folgenderma\u00dfen aus: index 0 n \u00e4 chster Eintrag 0 : index 0 next key : n \u00e4 chster Eintrag","title":"Iteration durch Arrays"},{"location":"php/02/#wichtige-array-funktionen","text":"","title":"Wichtige Array Funktionen"},{"location":"php/02/#elemente-zahlen","text":"Mit der Funktion count oder sizeof (als Alias) kann die Anzahl der Elemente in einem Array gez\u00e4hlt werden: <?php $arr = [ \"hello\" , \"array\" , \"count\" ]; echo count ( $arr ); // 3 echo sizeof ( $arr ); // 3","title":"Elemente z\u00e4hlen"},{"location":"php/02/#existenz-prufen","text":"Mit der Funktion isset kann gepr\u00fcft werden, ob ein Index oder Schl\u00fcssel eines Arrays gesetzt ist (bzw. existiert). Ein Zugriff auf einen undefinierten Schl\u00fcssel oder Index w\u00fcrde zu einem Fehler f\u00fchren. <?php $arr = [ 'key1' => 'value1' , 'key2' => 'value2' ]; if ( isset ( $arr [ 'key1' ])) { echo \"key1 ist gesetzt\" ; } else { echo \"key1 ist nicht gesetzt\" ; } if ( isset ( $arr [ 'key_xyz' ])) { echo \"key_xyz ist gesetzt\" ; } else { echo \"key_xyz ist nicht gesetzt\" ; } // Ausgabe des Skripts: // key1 ist gesetzt // key_xyz ist nicht gesetzt","title":"Existenz pr\u00fcfen"},{"location":"php/02/#element-loschen","text":"Die Funktion unset kann verwendet werden um einzelne Elemente eines Arrays zu l\u00f6schen. <?php $arr = [ \"a\" => \"a value\" , \"b\" => \"b value\" ]; echo count ( $arr ) . \" \\n \" ; // 2 unset ( $arr [ \"a\" ]); echo count ( $arr ) . \" \\n \" ; // 1","title":"Element l\u00f6schen"},{"location":"php/03/","text":"Superglobals PHP definiert einige globale Variablen (bezeichnet als Superglobals), welche wichtige Informationen zum HTTP-Request und zur Server Umgebung enthalten. Superglobals sind als assoziative Arrays angelegt. Folgende Superglobals sind definiert: $_SERVER : wichtige Informationen zum aktuellen HTTP-Request und Serverkontext $_GET : Schl\u00fcssel/Wert Paare, welche URL Parameter enthalten $_POST : Schl\u00fcssel/Wert Paare, welche Daten aus dem HTTP-Body enthalten $_FILES : Falls Dateien an den Server gesendet werden, sind die tempor\u00e4ren Pfade und Statusinformationen dar\u00fcber dort enthalten $_COOKIE : Schl\u00fcssel/Wert Paare \u00fcber Cookies, welche im HTTP-Request \u00fcbertragen wurden $_SESSION : Schl\u00fcssel/Wert Paare zur aktuellen Session, welche am Server gespeichert ist (Referenziert \u00fcber Session-Cookie) $_REQUEST : Zusammenfassung von $_GET , $_POST , $_COOKIE $_ENV : Umgebungsvariablen am Server Beispiel: $_GET Die Superglobal $_GET enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche als URL-Parameter (Querystring) an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber den URL-Parameter name gesetzt. Wird kein URL-Parameter name angegeben, so erh\u00e4lt die Variable $name den Wert \"Welt\" (Null-Coalesing Operator). <?php $name = $_GET [ 'name' ] ?? \"Welt\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> Hallo <?php echo $name ; ?> ! </p> </body> </html> Wird das Skript \u00fcber die URL http://localhost:9000 aufgerufen, sieht die Ausgabe \u00e4hnlich zum Screenshot unten aus: Falls das Skript \u00fcber die URL http://localhost:9000?name=Franzi aufgerufen wird, wird die Variable $name mit dem Wert \"Franzi\" belegt und die Ausgabe resultiert in Hallo Franzi . Dies entspricht dem unten angef\u00fchrten Screenshot: Beispiel: $_POST Die Superglobal $_POST enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche im HTTP-Body an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber ein Formularfeld gesetzt dieses hat das Attribute name mit dem Attributwert firstname gesetzt. Dadurch enth\u00e4lt der HTTP-Body beim Absenden des Formulars den Schl\u00fcssel firstname mit entsprechendem Wert (aus dem Formularfeld). <?php $name = $_POST [ 'firstname' ] ?? \"\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> <?php echo $name ? \"Hallo $name !\" : \"Wen willst du gr\u00fc\u00dfen?\" ; ?> </p> <form method=\"post\"> <input name=\"firstname\" value=\" <?php echo $name ; ?> \"> <button type=\"submit\">Absenden</button> </form> </body> </html> Im Screenshot wird das Skript \u00fcber den lokalen Web-Server aufgerufen mit der URL http://localhost:8080 . Bei Absenden des Formulars mit dem Wert Studenten wird das Schl\u00fcssel/Wert Paar firstname=Studenten als POST (HTTP-Request mit Methode POST) an den Web-Server gesendet. Die Verarbeitung am Web-Server f\u00fchrt dazu, dass die Variable $name mit dem Wert Studenten belegt wird und an unterschiedlichen Stellen zur entsprechenden Ausgabe f\u00fchrt:","title":"Superglobals"},{"location":"php/03/#superglobals","text":"PHP definiert einige globale Variablen (bezeichnet als Superglobals), welche wichtige Informationen zum HTTP-Request und zur Server Umgebung enthalten. Superglobals sind als assoziative Arrays angelegt. Folgende Superglobals sind definiert: $_SERVER : wichtige Informationen zum aktuellen HTTP-Request und Serverkontext $_GET : Schl\u00fcssel/Wert Paare, welche URL Parameter enthalten $_POST : Schl\u00fcssel/Wert Paare, welche Daten aus dem HTTP-Body enthalten $_FILES : Falls Dateien an den Server gesendet werden, sind die tempor\u00e4ren Pfade und Statusinformationen dar\u00fcber dort enthalten $_COOKIE : Schl\u00fcssel/Wert Paare \u00fcber Cookies, welche im HTTP-Request \u00fcbertragen wurden $_SESSION : Schl\u00fcssel/Wert Paare zur aktuellen Session, welche am Server gespeichert ist (Referenziert \u00fcber Session-Cookie) $_REQUEST : Zusammenfassung von $_GET , $_POST , $_COOKIE $_ENV : Umgebungsvariablen am Server","title":"Superglobals"},{"location":"php/03/#beispiel-_get","text":"Die Superglobal $_GET enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche als URL-Parameter (Querystring) an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber den URL-Parameter name gesetzt. Wird kein URL-Parameter name angegeben, so erh\u00e4lt die Variable $name den Wert \"Welt\" (Null-Coalesing Operator). <?php $name = $_GET [ 'name' ] ?? \"Welt\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> Hallo <?php echo $name ; ?> ! </p> </body> </html> Wird das Skript \u00fcber die URL http://localhost:9000 aufgerufen, sieht die Ausgabe \u00e4hnlich zum Screenshot unten aus: Falls das Skript \u00fcber die URL http://localhost:9000?name=Franzi aufgerufen wird, wird die Variable $name mit dem Wert \"Franzi\" belegt und die Ausgabe resultiert in Hallo Franzi . Dies entspricht dem unten angef\u00fchrten Screenshot:","title":"Beispiel: $_GET"},{"location":"php/03/#beispiel-_post","text":"Die Superglobal $_POST enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche im HTTP-Body an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber ein Formularfeld gesetzt dieses hat das Attribute name mit dem Attributwert firstname gesetzt. Dadurch enth\u00e4lt der HTTP-Body beim Absenden des Formulars den Schl\u00fcssel firstname mit entsprechendem Wert (aus dem Formularfeld). <?php $name = $_POST [ 'firstname' ] ?? \"\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> <?php echo $name ? \"Hallo $name !\" : \"Wen willst du gr\u00fc\u00dfen?\" ; ?> </p> <form method=\"post\"> <input name=\"firstname\" value=\" <?php echo $name ; ?> \"> <button type=\"submit\">Absenden</button> </form> </body> </html> Im Screenshot wird das Skript \u00fcber den lokalen Web-Server aufgerufen mit der URL http://localhost:8080 . Bei Absenden des Formulars mit dem Wert Studenten wird das Schl\u00fcssel/Wert Paar firstname=Studenten als POST (HTTP-Request mit Methode POST) an den Web-Server gesendet. Die Verarbeitung am Web-Server f\u00fchrt dazu, dass die Variable $name mit dem Wert Studenten belegt wird und an unterschiedlichen Stellen zur entsprechenden Ausgabe f\u00fchrt:","title":"Beispiel: $_POST"},{"location":"php/04/","text":"Funktionen PHP hat \u00fcber 1000 build-in Funktionen, es k\u00f6nnen auch eigene Funktionen definiert werden. Eine Funktion ist ein Block aus Befehlen, welcher \u00fcber einen Funktionsaufruf ausgef\u00fchrt werden kann. Definition und Nutzung Im unten angef\u00fchrten Beispiel wird eine Funktion add definiert. Diese Funktion kann 2 Parameter erhalten, wobei der zweite Parameter $b einen Defaultwert besitzt. Die Funktion kann also ohne Angabe des zweiten Parameters genutzt werden. Funktionen k\u00f6nnen \u00fcber das Schl\u00fcsselwort return ein Ergebnis zur\u00fcckgeben. <?php function add ( $a , $b = 0 ) { return $a + $b ; } echo add ( 3 , 5 ); // 8 echo add ( 3 ); // 3 echo add ( 3 , add ( 4 , 5 )); // 12 Typdeklaration Es kann f\u00fcr Funktionsparameter und R\u00fcckgabeparameter eine Typdeklaration durchgef\u00fchrt werden. Die PHP-Laufzeitumgebung versucht die entsprechenden Parameter in den gew\u00fcnschten Typ zu \u00fcberf\u00fchren. <?php function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // 7 \u00dcber die Konstante strict_types kann festgelegt werden, dass PHP eine strenge Typisierung durchsetzt. Falls ein Parameter mit falschem Datentyp an eine Funktion \u00fcbergeben wird, wird ein TypeError geworfen. <?php declare ( strict_types = 1 ); function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // ERROR: TypeError Pass by reference (Referenzparameter) Einfache Datentypen und Arrays werden als Kopien an eine Funktion \u00fcbergeben. Objekte werden als Referenzen an eine Funktion \u00fcbergeben. Mit vorangestellten & wird ein Parameter als Referenzen \u00fcbergeben. Da einfache Datentypen als Kopien an eine Funktion \u00fcbergeben werden, \u00e4ndert sich durch den Funktionsaufruf der Wert der Variable $x nicht. <?php function multiply ( $a , $multiplier = 10 ) { $a * $multiplier ; } $x = 10 ; multiply ( $x ); echo $x ; // 10 Durch das vorangestellte & wird der Parameter $a zu einer Referenz. Die Variable $x wird als Referenz \u00fcbergeben und durch den Funktionsaufruf wird der Wert der Variable $x abge\u00e4ndert. <?php function multiply ( & $a , $multiplier = 10 ) { $a * $multiplier ; } $x = 10 ; multiply ( $x ); echo $x ; // 100","title":"Funktionen"},{"location":"php/04/#funktionen","text":"PHP hat \u00fcber 1000 build-in Funktionen, es k\u00f6nnen auch eigene Funktionen definiert werden. Eine Funktion ist ein Block aus Befehlen, welcher \u00fcber einen Funktionsaufruf ausgef\u00fchrt werden kann.","title":"Funktionen"},{"location":"php/04/#definition-und-nutzung","text":"Im unten angef\u00fchrten Beispiel wird eine Funktion add definiert. Diese Funktion kann 2 Parameter erhalten, wobei der zweite Parameter $b einen Defaultwert besitzt. Die Funktion kann also ohne Angabe des zweiten Parameters genutzt werden. Funktionen k\u00f6nnen \u00fcber das Schl\u00fcsselwort return ein Ergebnis zur\u00fcckgeben. <?php function add ( $a , $b = 0 ) { return $a + $b ; } echo add ( 3 , 5 ); // 8 echo add ( 3 ); // 3 echo add ( 3 , add ( 4 , 5 )); // 12","title":"Definition und Nutzung"},{"location":"php/04/#typdeklaration","text":"Es kann f\u00fcr Funktionsparameter und R\u00fcckgabeparameter eine Typdeklaration durchgef\u00fchrt werden. Die PHP-Laufzeitumgebung versucht die entsprechenden Parameter in den gew\u00fcnschten Typ zu \u00fcberf\u00fchren. <?php function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // 7 \u00dcber die Konstante strict_types kann festgelegt werden, dass PHP eine strenge Typisierung durchsetzt. Falls ein Parameter mit falschem Datentyp an eine Funktion \u00fcbergeben wird, wird ein TypeError geworfen. <?php declare ( strict_types = 1 ); function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // ERROR: TypeError","title":"Typdeklaration"},{"location":"php/04/#pass-by-reference-referenzparameter","text":"Einfache Datentypen und Arrays werden als Kopien an eine Funktion \u00fcbergeben. Objekte werden als Referenzen an eine Funktion \u00fcbergeben. Mit vorangestellten & wird ein Parameter als Referenzen \u00fcbergeben. Da einfache Datentypen als Kopien an eine Funktion \u00fcbergeben werden, \u00e4ndert sich durch den Funktionsaufruf der Wert der Variable $x nicht. <?php function multiply ( $a , $multiplier = 10 ) { $a * $multiplier ; } $x = 10 ; multiply ( $x ); echo $x ; // 10 Durch das vorangestellte & wird der Parameter $a zu einer Referenz. Die Variable $x wird als Referenz \u00fcbergeben und durch den Funktionsaufruf wird der Wert der Variable $x abge\u00e4ndert. <?php function multiply ( & $a , $multiplier = 10 ) { $a * $multiplier ; } $x = 10 ; multiply ( $x ); echo $x ; // 100","title":"Pass by reference (Referenzparameter)"},{"location":"php/05/","text":"Objektorientierte Programmierung PHP ist eine objektorientierte Programmiersprache und besitzt alle g\u00e4ngigen Konzepte einer objektorientierten Programmiersprache. Alle g\u00e4ngigen Konzepte wie Klassenvererbung , Member Sichtbarkeit , Interfaces , statische Member , anonyme Klassen , abstrakte Klassen sind auch in PHP vorhanden. Klassen Klassen werden \u00fcber das Schl\u00fcsselwort class definiert. Es gibt spezielle Methoden wie den Konstruktur ( __construct ), welche mit doppeltem Unterstrich beginnen. Alle Member sind generell public au\u00dfer es wird explizit anders angegeben wie zB f\u00fcr den Member $color . Mit dem Schl\u00fcsselwort new k\u00f6nnen Klasseninstanzen erzeugt werden. \u00dcber die Variable $this kann innerhalb der Klasse auf die Instanz zugegriffen werden. Zugriff auf Member der Instanz wird \u00fcber -> durchgef\u00fchrt. So wird zum Beispiel die Methode drive auf der Instanz $veh \u00fcber $veh->drive() ausgef\u00fchrt. <?php class Vehicle { protected $color ; function __construct ( string $color ) { $this -> color = $color ; } function drive () { echo $this -> color . \" vehicle is driving!\" ; } } $veh = new Vehicle ( \"red\" ); $veh -> drive (); // red vehicle is driving! Magic Methods Es sind einige spezielle Methoden (magic Methods) f\u00fcr Klassen definiert. Die Methodennamen dieser speziellen Methoden beginnen mit __ (zB der Konstruktur __construct ). Eine \u00dcbersicht aller Magic Methods findet sich in der PHP Dokumentation . __set und __get F\u00fcr setter und getter gibt es die generischen Methoden __set und __get . Falls diese Methoden implementiert werden, werden diese f\u00fcr jegliches Setzen bzw. Abfragen von Objekt Attributen aufgerufen. <?php class Product { protected $name ; protected $price ; function __set ( $name , $value ) { if ( $name == \"name\" ) { $this -> name = ( string ) $value ; } elseif ( $name == \"price\" ) { $this -> price = ( float ) $value ; } } function __get ( $name ) { if ( $name == \"name\" ) { return $this -> name ; } elseif ( $name == \"price\" ) { return $this -> price ; } elseif ( $name == \"vat\" ) { return $this -> price * 0.2 ; } } } $product = new Product (); $product -> name = \"Mein Produkt\" ; $product -> price = 3.99 ; echo $product -> name . \"/ Preis inkl. MWSt.: \" . $product -> vat . \" \\n \" ; __invoke Mit der Implementierung der Methode __invoke kann ein Objekt wie eine Funktion genutzt werden. Der Nutzen dabei liegt darin, dass das Objekt einen internen Zustand halten kann, welcher \u00fcber mehrmalige Aufrufe erhalten bleibt, siehe das Beispiel dazu: <?php class FunctionObject { protected $internalState = 10 ; function __invoke () { $this -> internalState ++ ; return $this -> internalState ; } } $obj = new FunctionObject (); $result = $obj (); __toString Durch \u00fcberschreiben der Methode __toString kann bestimmt werden, wie ein Objekt in einen String \u00fcberf\u00fchrt wird. Dies ist unter anderem zu Debugging Zwecken sehr hilfreich. __call Die Methode __call wird aufgerufen, wenn eine nicht existierende Methode auf einem Objekt aufgerufen wird. <?php class Vehicle { function __call ( $methodName , $arguments ) { if ( $methodName == \"drive\" ) { echo \"Das Fahrzeug f\u00e4hrt \\n \" ; } elseif ( $methodName == \"break\" || $methodName == \"stop\" ) { echo \"Das Fahrzeug bremst \\n \" ; } else { echo \"Diese Aktion f\u00fchrt zu nichts... \\n \" ; } } } $veh = new Vehicle (); $veh -> drive (); // Das Fahrzeug f\u00e4hrt $veh -> break (); // Das Fahrzeug bremst $veh -> irgendEineMethodeMitKomischemName (); // Diese Aktion f\u00fchrt zu nichts... $veh -> andereMethodeOhneNutzen (); // Diese Aktion f\u00fchrt zu nichts... Vererbung \u00dcber das Schl\u00fcsselwort extends wird die Klassenvererbung durchgef\u00fchrt. PHP unterst\u00fctzt keine Mehrfachvererbung. <?php class Car extends Vehicle { function drive () { echo $this -> color . \" CAR is driving!\" ; } } $car = new Car ( \"blue\" ); $car -> drive (); // blue CAR is driving! Statische Member Mit dem Schl\u00fcsselwort static k\u00f6nnen statische Member einer Klasse definiert werden. Zugriff auf statische Member wird \u00fcber den :: Operator durchgef\u00fchrt (Scope Resolution Operator). Innerhalb der Klasse kann mit dem Schl\u00fcsselwort self auf statische Member zugegriffen werden. <?php class Car { protected static $wheel_count = 4 ; public static function checkWheels ( $wheel_count ) { return $wheel_count == self :: $wheel_count ; } } echo Car :: checkWheels ( 5 ) ? \"richtige Reifenanzahl\" : \"falsche Reifenanzahl\" ; // Ausgabe: falsche Reifenanzahl Traits Mit Traits k\u00f6nnen Klassen einfach erweitert werden. Anders als \u00fcber Vererbung kann eine Klasse von mehreren Traits erweitert werden. Von Traits k\u00f6nnen keine Instanzen gebildet werden sie dienen ausschlie\u00dflich der Erweiterung von Klassen. Im Folgenden wird das g\u00e4ngige Singleton Design Pattern mit Hilfe eines Traits implementiert. Ein Trait wird \u00fcber das Schl\u00fcsselwort use in die Klasse integriert: <?php trait Singleton { protected static $instance ; public static function instance () { if ( ! self :: $instance ) { self :: $instance = new static (); } return self :: $instance ; } } class ExampleClass { use Singleton ; } $instance = ExampleClass :: instance ();","title":"OOP"},{"location":"php/05/#objektorientierte-programmierung","text":"PHP ist eine objektorientierte Programmiersprache und besitzt alle g\u00e4ngigen Konzepte einer objektorientierten Programmiersprache. Alle g\u00e4ngigen Konzepte wie Klassenvererbung , Member Sichtbarkeit , Interfaces , statische Member , anonyme Klassen , abstrakte Klassen sind auch in PHP vorhanden.","title":"Objektorientierte Programmierung"},{"location":"php/05/#klassen","text":"Klassen werden \u00fcber das Schl\u00fcsselwort class definiert. Es gibt spezielle Methoden wie den Konstruktur ( __construct ), welche mit doppeltem Unterstrich beginnen. Alle Member sind generell public au\u00dfer es wird explizit anders angegeben wie zB f\u00fcr den Member $color . Mit dem Schl\u00fcsselwort new k\u00f6nnen Klasseninstanzen erzeugt werden. \u00dcber die Variable $this kann innerhalb der Klasse auf die Instanz zugegriffen werden. Zugriff auf Member der Instanz wird \u00fcber -> durchgef\u00fchrt. So wird zum Beispiel die Methode drive auf der Instanz $veh \u00fcber $veh->drive() ausgef\u00fchrt. <?php class Vehicle { protected $color ; function __construct ( string $color ) { $this -> color = $color ; } function drive () { echo $this -> color . \" vehicle is driving!\" ; } } $veh = new Vehicle ( \"red\" ); $veh -> drive (); // red vehicle is driving!","title":"Klassen"},{"location":"php/05/#magic-methods","text":"Es sind einige spezielle Methoden (magic Methods) f\u00fcr Klassen definiert. Die Methodennamen dieser speziellen Methoden beginnen mit __ (zB der Konstruktur __construct ). Eine \u00dcbersicht aller Magic Methods findet sich in der PHP Dokumentation .","title":"Magic Methods"},{"location":"php/05/#__set-und-__get","text":"F\u00fcr setter und getter gibt es die generischen Methoden __set und __get . Falls diese Methoden implementiert werden, werden diese f\u00fcr jegliches Setzen bzw. Abfragen von Objekt Attributen aufgerufen. <?php class Product { protected $name ; protected $price ; function __set ( $name , $value ) { if ( $name == \"name\" ) { $this -> name = ( string ) $value ; } elseif ( $name == \"price\" ) { $this -> price = ( float ) $value ; } } function __get ( $name ) { if ( $name == \"name\" ) { return $this -> name ; } elseif ( $name == \"price\" ) { return $this -> price ; } elseif ( $name == \"vat\" ) { return $this -> price * 0.2 ; } } } $product = new Product (); $product -> name = \"Mein Produkt\" ; $product -> price = 3.99 ; echo $product -> name . \"/ Preis inkl. MWSt.: \" . $product -> vat . \" \\n \" ;","title":"__set und __get"},{"location":"php/05/#__invoke","text":"Mit der Implementierung der Methode __invoke kann ein Objekt wie eine Funktion genutzt werden. Der Nutzen dabei liegt darin, dass das Objekt einen internen Zustand halten kann, welcher \u00fcber mehrmalige Aufrufe erhalten bleibt, siehe das Beispiel dazu: <?php class FunctionObject { protected $internalState = 10 ; function __invoke () { $this -> internalState ++ ; return $this -> internalState ; } } $obj = new FunctionObject (); $result = $obj ();","title":"__invoke"},{"location":"php/05/#__tostring","text":"Durch \u00fcberschreiben der Methode __toString kann bestimmt werden, wie ein Objekt in einen String \u00fcberf\u00fchrt wird. Dies ist unter anderem zu Debugging Zwecken sehr hilfreich.","title":"__toString"},{"location":"php/05/#__call","text":"Die Methode __call wird aufgerufen, wenn eine nicht existierende Methode auf einem Objekt aufgerufen wird. <?php class Vehicle { function __call ( $methodName , $arguments ) { if ( $methodName == \"drive\" ) { echo \"Das Fahrzeug f\u00e4hrt \\n \" ; } elseif ( $methodName == \"break\" || $methodName == \"stop\" ) { echo \"Das Fahrzeug bremst \\n \" ; } else { echo \"Diese Aktion f\u00fchrt zu nichts... \\n \" ; } } } $veh = new Vehicle (); $veh -> drive (); // Das Fahrzeug f\u00e4hrt $veh -> break (); // Das Fahrzeug bremst $veh -> irgendEineMethodeMitKomischemName (); // Diese Aktion f\u00fchrt zu nichts... $veh -> andereMethodeOhneNutzen (); // Diese Aktion f\u00fchrt zu nichts...","title":"__call"},{"location":"php/05/#vererbung","text":"\u00dcber das Schl\u00fcsselwort extends wird die Klassenvererbung durchgef\u00fchrt. PHP unterst\u00fctzt keine Mehrfachvererbung. <?php class Car extends Vehicle { function drive () { echo $this -> color . \" CAR is driving!\" ; } } $car = new Car ( \"blue\" ); $car -> drive (); // blue CAR is driving!","title":"Vererbung"},{"location":"php/05/#statische-member","text":"Mit dem Schl\u00fcsselwort static k\u00f6nnen statische Member einer Klasse definiert werden. Zugriff auf statische Member wird \u00fcber den :: Operator durchgef\u00fchrt (Scope Resolution Operator). Innerhalb der Klasse kann mit dem Schl\u00fcsselwort self auf statische Member zugegriffen werden. <?php class Car { protected static $wheel_count = 4 ; public static function checkWheels ( $wheel_count ) { return $wheel_count == self :: $wheel_count ; } } echo Car :: checkWheels ( 5 ) ? \"richtige Reifenanzahl\" : \"falsche Reifenanzahl\" ; // Ausgabe: falsche Reifenanzahl","title":"Statische Member"},{"location":"php/05/#traits","text":"Mit Traits k\u00f6nnen Klassen einfach erweitert werden. Anders als \u00fcber Vererbung kann eine Klasse von mehreren Traits erweitert werden. Von Traits k\u00f6nnen keine Instanzen gebildet werden sie dienen ausschlie\u00dflich der Erweiterung von Klassen. Im Folgenden wird das g\u00e4ngige Singleton Design Pattern mit Hilfe eines Traits implementiert. Ein Trait wird \u00fcber das Schl\u00fcsselwort use in die Klasse integriert: <?php trait Singleton { protected static $instance ; public static function instance () { if ( ! self :: $instance ) { self :: $instance = new static (); } return self :: $instance ; } } class ExampleClass { use Singleton ; } $instance = ExampleClass :: instance ();","title":"Traits"},{"location":"php/06/","text":"Sessions und Cookies Info Das Erzeugen von Cookies bzw. einer Session muss vor jeglicher Ausgabe des PHP-Programms passieren. Die Funktionen setcookies oder session_start sollten demnach so fr\u00fch wie m\u00f6glich im PHP-Programm aufgerufen werden. Cookies Cookies erzeugen PHP bietet die Funktion setcookie , damit k\u00f6nnen Cookies am Client erzeut werden. Die Set-Cookie Header werden dadurch \u00fcber den HTTP-Response gesetzt. Alle wichtigen Cookie-Parameter k\u00f6nnen dadurch gesetzt werden: Parameter: Cookie Name Parameter (optional): Cookie Wert; default als \"\" Parameter (optional): Angabe eines Zeitstempels in Sekunden mit einem Ablaufdatum bis dahin das Cookie g\u00fcltig ist; Keine Angabe l\u00e4sst das Cookie bis zum Schlie\u00dfen des Web-Browsers g\u00fcltig sein ( 0 ) Parameter (optional): Angabe eines URI Pfades innerhalb welchem das Cookie g\u00fcltig ist; Default ist der String \"\" f\u00fcr alle Pfade Parameter (optional): Angabe einer Subdomain, welche in die G\u00fcltigkeit eines Cookie geh\u00f6rt; Default ist der String \"\" f\u00fcr alle Subdomains Parameter (optional): Boolean der angibt, ob das Cookie nur \u00fcber HTTPS \u00fcbertragen wird; default ist false Parameter (optional): Boolean der angibt, ob das Cookie HTTP-only ist, also nicht \u00fcber JavaScript im Client ver\u00e4nderbar; default ist false <?php setcookie ( \"MyCookie\" , // Cookie Name \"some value\" , // Cookie Wert time () + 3600 , // 1h Lebensdauer \"\" , // Pfad G\u00fcltigkeit \"\" = default \"subdomain.example.com\" , // Domain G\u00fcltigkeit \"\" = default true , // Secure, HTTPS true // httpOnly, kein \u00c4ndern am Client ); Cookies auslesen Innerhalb der Superglobal $_COOKIES sind alle Cookies als Schl\u00fcssel/Wert Paare hinterlegt. Alle Cookies welche vom Client gesendet wurden, k\u00f6nnen dadurch ausgelesen werden. Im folgenden Beispiel wird das assoziative Superglobal Array $_COOKIES mit einer foreach Schleife ausgelesen: <?php foreach ( $_COOKIE as $key => $value ) { echo $key . \": \" . $value ; } Sessions PHP Sessions werden entweder automatisch oder manuell gestartet. Falls in der php.ini die Konfiguration session.auto_start mit 1 belegt ist, werden Sessions automatisch f\u00fcr jeden Client erzeugt. Andernfalls muss eine Session explizit \u00fcber die Methode session_start erzeugt werden. Clients einer Session werden \u00fcber Cookies identifiziert. Der Name des Cookies ist default mit PHPSESSID spezifiziert (siehe php.ini ). Per default werden Sessions am Dateisystem des Servers gespeichert. Dies kann nat\u00fcrlich ge\u00e4ndert werden, sodass Sessions zB auch in Datenbanken gespeichert werden k\u00f6nnen. Mit der Funktion session_start wird eine bestehende Session (\u00fcber Cookie \u00fcbergeben) weitergef\u00fchrt oder eine neue gestartet. In der Superglobal $_SESSION k\u00f6nnen Schl\u00fcssel/Wert Paare abgelegt, gelesen und ver\u00e4ndert werden, welche zur entsprechenden Session geh\u00f6ren. Die G\u00fcltigkeit der Session h\u00e4ngt mit der G\u00fcltigkeit des Cookies zusammen. Default ist die G\u00fcltigkeit bis zum Schlie\u00dfen des Web-Browsers definiert. <?php // starten der Session vor jeglicher Ausgabe des PHP-Programms: session_start (); // \u00c4ndern von Session Inhalten: $_SESSION [ 'cart' ] = [ \"product-1\" => 5 , \"product-2\" => 3 ] // Ausgabe der Session Inhalte: foreach ( $_SESSION [ 'cart' ] as $key => $value ) { echo $key . \" \" . $value . \" \\n \" ; }","title":"Sessions und Cookies"},{"location":"php/06/#sessions-und-cookies","text":"Info Das Erzeugen von Cookies bzw. einer Session muss vor jeglicher Ausgabe des PHP-Programms passieren. Die Funktionen setcookies oder session_start sollten demnach so fr\u00fch wie m\u00f6glich im PHP-Programm aufgerufen werden.","title":"Sessions und Cookies"},{"location":"php/06/#cookies","text":"","title":"Cookies"},{"location":"php/06/#cookies-erzeugen","text":"PHP bietet die Funktion setcookie , damit k\u00f6nnen Cookies am Client erzeut werden. Die Set-Cookie Header werden dadurch \u00fcber den HTTP-Response gesetzt. Alle wichtigen Cookie-Parameter k\u00f6nnen dadurch gesetzt werden: Parameter: Cookie Name Parameter (optional): Cookie Wert; default als \"\" Parameter (optional): Angabe eines Zeitstempels in Sekunden mit einem Ablaufdatum bis dahin das Cookie g\u00fcltig ist; Keine Angabe l\u00e4sst das Cookie bis zum Schlie\u00dfen des Web-Browsers g\u00fcltig sein ( 0 ) Parameter (optional): Angabe eines URI Pfades innerhalb welchem das Cookie g\u00fcltig ist; Default ist der String \"\" f\u00fcr alle Pfade Parameter (optional): Angabe einer Subdomain, welche in die G\u00fcltigkeit eines Cookie geh\u00f6rt; Default ist der String \"\" f\u00fcr alle Subdomains Parameter (optional): Boolean der angibt, ob das Cookie nur \u00fcber HTTPS \u00fcbertragen wird; default ist false Parameter (optional): Boolean der angibt, ob das Cookie HTTP-only ist, also nicht \u00fcber JavaScript im Client ver\u00e4nderbar; default ist false <?php setcookie ( \"MyCookie\" , // Cookie Name \"some value\" , // Cookie Wert time () + 3600 , // 1h Lebensdauer \"\" , // Pfad G\u00fcltigkeit \"\" = default \"subdomain.example.com\" , // Domain G\u00fcltigkeit \"\" = default true , // Secure, HTTPS true // httpOnly, kein \u00c4ndern am Client );","title":"Cookies erzeugen"},{"location":"php/06/#cookies-auslesen","text":"Innerhalb der Superglobal $_COOKIES sind alle Cookies als Schl\u00fcssel/Wert Paare hinterlegt. Alle Cookies welche vom Client gesendet wurden, k\u00f6nnen dadurch ausgelesen werden. Im folgenden Beispiel wird das assoziative Superglobal Array $_COOKIES mit einer foreach Schleife ausgelesen: <?php foreach ( $_COOKIE as $key => $value ) { echo $key . \": \" . $value ; }","title":"Cookies auslesen"},{"location":"php/06/#sessions","text":"PHP Sessions werden entweder automatisch oder manuell gestartet. Falls in der php.ini die Konfiguration session.auto_start mit 1 belegt ist, werden Sessions automatisch f\u00fcr jeden Client erzeugt. Andernfalls muss eine Session explizit \u00fcber die Methode session_start erzeugt werden. Clients einer Session werden \u00fcber Cookies identifiziert. Der Name des Cookies ist default mit PHPSESSID spezifiziert (siehe php.ini ). Per default werden Sessions am Dateisystem des Servers gespeichert. Dies kann nat\u00fcrlich ge\u00e4ndert werden, sodass Sessions zB auch in Datenbanken gespeichert werden k\u00f6nnen. Mit der Funktion session_start wird eine bestehende Session (\u00fcber Cookie \u00fcbergeben) weitergef\u00fchrt oder eine neue gestartet. In der Superglobal $_SESSION k\u00f6nnen Schl\u00fcssel/Wert Paare abgelegt, gelesen und ver\u00e4ndert werden, welche zur entsprechenden Session geh\u00f6ren. Die G\u00fcltigkeit der Session h\u00e4ngt mit der G\u00fcltigkeit des Cookies zusammen. Default ist die G\u00fcltigkeit bis zum Schlie\u00dfen des Web-Browsers definiert. <?php // starten der Session vor jeglicher Ausgabe des PHP-Programms: session_start (); // \u00c4ndern von Session Inhalten: $_SESSION [ 'cart' ] = [ \"product-1\" => 5 , \"product-2\" => 3 ] // Ausgabe der Session Inhalte: foreach ( $_SESSION [ 'cart' ] as $key => $value ) { echo $key . \" \" . $value . \" \\n \" ; }","title":"Sessions"},{"location":"php/07/","text":"Errors und Exceptions PHP ist eine Programmiersprache mit einer langen Geschichte. Die Fehlerbehandlung ist daher zweigeteilt in Errors (im folgenden Fehler gennannt) und Exceptions . Fehler kommen aus der Zeit vor der Objektorientierten Programmierung und Exceptions wurden mit der Objektorientierten Programmierung eingef\u00fchrt. PHP hat einen eher \"lockeren\" Umgang mit Fehlern im Programmablauf. PHP unterscheidet zwischen unterschiedlichen Schweregraden von Fehlern. Nicht in allen Schweregraden wird der Programmablauf gestoppt, sondern die PHP Laufzeitumgebung versucht das Programm weiter auszuf\u00fchren. Eine Exception hingegen f\u00fchrt immer dazu, dass der Programmablauf gestoppt wird. Ein PHP-Programm kann so angepasst werden, dass Fehler in Exceptions \u00fcberf\u00fchrt werden. Dies ist eine g\u00e4ngige Praxis in der modernen PHP Entwicklung (zB in Laravel oder Symfony). Schweregrade von Fehlern PHP identifiziert die unterschiedlichen Schweregrade von Fehlern \u00fcber Konstanten. Die wichtigsten sind folgende: E_ERROR : Fataler Laufzeitfehler, PHP kann die Programmausf\u00fchrung nicht mehr fortf\u00fchren und der gesamte Programmablauf wird gestoppt. Eine Exception ist immer ein E_ERROR ! E_WARNING : Warnungen sind fehlerhaftes Programmverhalten, aber keine fatalen Laufzeitfehler, welche die Ausf\u00fchrung nicht stoppen. E_NOTICE : Hinweise welche im weiteren vielleicht zu einem fatalen Laufzeitfehler f\u00fchren k\u00f6nnen. Alle verf\u00fcgbaren Konstanten sind inder PHP Dokumentation zu finden. Fehler Beispiele E_ERROR <?php $obj = new NonExistingClass (); Es wird versucht eine Instanz der Klasse NonExistingClass zu erzeugen. Die Klasse existiert nicht. Das Programm erzeugt einen Fatal Error (E_ERROR) und wird abgebrochen: PHP Fatal error : Uncaught Error : Class 'NonExistingClass' not found in C : \\ example \\ error . php : 3 Stack trace : # 0 { main } thrown in C : \\ example \\ error . php on line 3 E_WARNING <?php $file = fopen ( \"non_existing_file.txt\" , \"r\" ); Das Programm wird nicht gestoppt, obwohl eine Datei eingelesen werden sollte, welche nicht existiert. Je nachdem wie die Variable $file weiter genutzt wird, kann das Programm nat\u00fcrlich in einem fatalen Fehler resultieren: PHP Warning : fopen ( non_existing_file . txt ): failed to open stream : No such file or directory in C : \\ example \\ error . php on line 2 E_NOTICE <?php $sum = 3 + $a ; echo $sum ; Das Programm wird nicht gestoppt, obwohl eine Variable $a verwendet wird, welche nicht definiert wurde. Je nachdem wie die Variable $sum weiter genutzt wird, kann das Programm nat\u00fcrlich in einem fatalen Fehler resultieren: PHP Notice : Undefined variable : a in C : \\ example \\ error . php on line 2 3 Error Reporting Innerhalb der php.ini wird \u00fcber die Direktive error_reporting angegeben, welche Fehler ausgegeben werden sollen. Die Fehlerausgabe ist wichtig w\u00e4hrend der Entwicklungszeit jedoch im Produktivbetrieb sollten keine Fehler preisgegeben werden, da diese Informationen aus Sicherheitsgr\u00fcnden verborgen bleiben sollten. Innerhalb von PHP-Skripten kann der in der php.ini gesetzte Wert f\u00fcr error_reporting auch \u00fcberschrieben werden. Dazu kann die gleichnamige Funktion error_reporting verwendet werden. Im folgenden wird exemplarisch gezeigt wie das Error Reporting innerhalb eins PHP-Skripts konfiguriert werden kann: <?php // Das gesamte Error Reporting ausschalten error_reporting ( 0 ); // Alle Fehler werden \u00fcber Error Reporting ausgegeben error_reporting ( E_ALL ); // E_WARNING oder E_NOTICE Fehler ausgeben sonst alles verschweigen error_reporting ( E_WARNING | E_NOTICE ); // Alle Fehler au\u00dfer E_ERROR (fatale Fehler) sollen ausgegeben werden error_reporting ( E_ALL & ~ E_ERROR ); Exceptions Mit der Einf\u00fchrung der Objektorientierten Programmierung wurden auch Exceptions und try-catch Bl\u00f6cke in PHP eingef\u00fchrt. Die Herausforderung mit Exceptions liegt darin, dass ein Gro\u00dfteil der built-in PHP Funktion Fehler werfen und keine Exceptions. Neuere Objektorientierte Bestandteile der PHP Standard Library hingegen werfen Exceptions und keine Fehler. Exception Hierarchie Die Elternklasse aller PHP Exceptions ist Throwable . Des weiteren gibt es eine Zweiteilung in Error und Exception Exceptions ( Error ist eine Exception mit Klassenname Error ). Error ist die Elternklasse alle PHP Fehler die intern in Exceptions \u00fcberf\u00fchrt werden. Exception ist die Elternklasse aller Exceptions, f\u00fcr eigene Exceptions sollte man diese Klasse als Elternklasse verwenden. Try-catch Bl\u00f6cke Try-catch Bl\u00f6cke k\u00f6nnen, wie aus anderen Programmiersprachen bekannt, verwendet werden: <?php try { // Beliebiger Code, welcher in einem try-catch Block abgewickelt werden soll } catch ( DivisionByZeroError $e ) { // ZB den Division durch 0 Fehler bearbeiten } catch ( ArgumentCountError $e ) { // ZB den falsche Anzahl an Funktionsargumenten Fehler bearbeiten } finally { // Finally wird immer ausgef\u00fchrt, egal ob es sich um eine Exception handelt oder nicht... } Error Handler F\u00fcr ein PHP-Programm kann ein sog. Error Handler angegeben werden, welcher ausgef\u00fchrt wird nachdem ein entsprechender Fehler aufgetreten ist. Damit kann die Entwicklerin bestimmen was beim Auftreten eines Fehlers im Programm passieren soll. An die Funktion set_error_handler kann eine Funktion \u00fcbergeben werden, welche beim Auftreten eines Fehler ausgef\u00fchrt wird. PHP \u00fcbergibt das Error Handling komplett an diese eigens definierte Funktion. Die moderne Praxis \u00fcberf\u00fchrt einen PHP Error in eine sog. ErrorException . Somit werden alle Fehler in fatale Laufzeitfehler \u00fcberf\u00fchrt ( E_ERROR ), da Exceptions immer fatale Laufzeitfehler sind. <?php set_error_handler ( function ( $severity , $message , $file , $line ) { throw new ErrorException ( $message , 0 , $severity , $file , $line ); }); Exception Handler Analog zum Error Handler kann ein Exception Handler definiert werden. Der Exception Handler wird immer dann ausgef\u00fchrt, wenn eine Exception nicht getcatcht wurde (Nicht \u00fcber einen try-catch Block verarbeitet). Alle Exceptions die durch den \"Rost fallen\" k\u00f6nnen dadurch behandelt werden. Damit kann unter anderem sicher gestellt werden, dass keine Fehler f\u00fcr Benutzer sichtbar werden. Mit der Funktion set_exception_handler kann eine Funktion als Exception Handler \u00fcbergeben werden. Die Funktion bekommt die entsprechende Exception \u00fcbergeben: <?php set_exception_handler ( function ( Throwable $e ) { // Reaktion auf Exception ... });","title":"Errors und Exceptions"},{"location":"php/07/#errors-und-exceptions","text":"PHP ist eine Programmiersprache mit einer langen Geschichte. Die Fehlerbehandlung ist daher zweigeteilt in Errors (im folgenden Fehler gennannt) und Exceptions . Fehler kommen aus der Zeit vor der Objektorientierten Programmierung und Exceptions wurden mit der Objektorientierten Programmierung eingef\u00fchrt. PHP hat einen eher \"lockeren\" Umgang mit Fehlern im Programmablauf. PHP unterscheidet zwischen unterschiedlichen Schweregraden von Fehlern. Nicht in allen Schweregraden wird der Programmablauf gestoppt, sondern die PHP Laufzeitumgebung versucht das Programm weiter auszuf\u00fchren. Eine Exception hingegen f\u00fchrt immer dazu, dass der Programmablauf gestoppt wird. Ein PHP-Programm kann so angepasst werden, dass Fehler in Exceptions \u00fcberf\u00fchrt werden. Dies ist eine g\u00e4ngige Praxis in der modernen PHP Entwicklung (zB in Laravel oder Symfony).","title":"Errors und Exceptions"},{"location":"php/07/#schweregrade-von-fehlern","text":"PHP identifiziert die unterschiedlichen Schweregrade von Fehlern \u00fcber Konstanten. Die wichtigsten sind folgende: E_ERROR : Fataler Laufzeitfehler, PHP kann die Programmausf\u00fchrung nicht mehr fortf\u00fchren und der gesamte Programmablauf wird gestoppt. Eine Exception ist immer ein E_ERROR ! E_WARNING : Warnungen sind fehlerhaftes Programmverhalten, aber keine fatalen Laufzeitfehler, welche die Ausf\u00fchrung nicht stoppen. E_NOTICE : Hinweise welche im weiteren vielleicht zu einem fatalen Laufzeitfehler f\u00fchren k\u00f6nnen. Alle verf\u00fcgbaren Konstanten sind inder PHP Dokumentation zu finden.","title":"Schweregrade von Fehlern"},{"location":"php/07/#fehler-beispiele","text":"","title":"Fehler Beispiele"},{"location":"php/07/#e_error","text":"<?php $obj = new NonExistingClass (); Es wird versucht eine Instanz der Klasse NonExistingClass zu erzeugen. Die Klasse existiert nicht. Das Programm erzeugt einen Fatal Error (E_ERROR) und wird abgebrochen: PHP Fatal error : Uncaught Error : Class 'NonExistingClass' not found in C : \\ example \\ error . php : 3 Stack trace : # 0 { main } thrown in C : \\ example \\ error . php on line 3","title":"E_ERROR"},{"location":"php/07/#e_warning","text":"<?php $file = fopen ( \"non_existing_file.txt\" , \"r\" ); Das Programm wird nicht gestoppt, obwohl eine Datei eingelesen werden sollte, welche nicht existiert. Je nachdem wie die Variable $file weiter genutzt wird, kann das Programm nat\u00fcrlich in einem fatalen Fehler resultieren: PHP Warning : fopen ( non_existing_file . txt ): failed to open stream : No such file or directory in C : \\ example \\ error . php on line 2","title":"E_WARNING"},{"location":"php/07/#e_notice","text":"<?php $sum = 3 + $a ; echo $sum ; Das Programm wird nicht gestoppt, obwohl eine Variable $a verwendet wird, welche nicht definiert wurde. Je nachdem wie die Variable $sum weiter genutzt wird, kann das Programm nat\u00fcrlich in einem fatalen Fehler resultieren: PHP Notice : Undefined variable : a in C : \\ example \\ error . php on line 2 3","title":"E_NOTICE"},{"location":"php/07/#error-reporting","text":"Innerhalb der php.ini wird \u00fcber die Direktive error_reporting angegeben, welche Fehler ausgegeben werden sollen. Die Fehlerausgabe ist wichtig w\u00e4hrend der Entwicklungszeit jedoch im Produktivbetrieb sollten keine Fehler preisgegeben werden, da diese Informationen aus Sicherheitsgr\u00fcnden verborgen bleiben sollten. Innerhalb von PHP-Skripten kann der in der php.ini gesetzte Wert f\u00fcr error_reporting auch \u00fcberschrieben werden. Dazu kann die gleichnamige Funktion error_reporting verwendet werden. Im folgenden wird exemplarisch gezeigt wie das Error Reporting innerhalb eins PHP-Skripts konfiguriert werden kann: <?php // Das gesamte Error Reporting ausschalten error_reporting ( 0 ); // Alle Fehler werden \u00fcber Error Reporting ausgegeben error_reporting ( E_ALL ); // E_WARNING oder E_NOTICE Fehler ausgeben sonst alles verschweigen error_reporting ( E_WARNING | E_NOTICE ); // Alle Fehler au\u00dfer E_ERROR (fatale Fehler) sollen ausgegeben werden error_reporting ( E_ALL & ~ E_ERROR );","title":"Error Reporting"},{"location":"php/07/#exceptions","text":"Mit der Einf\u00fchrung der Objektorientierten Programmierung wurden auch Exceptions und try-catch Bl\u00f6cke in PHP eingef\u00fchrt. Die Herausforderung mit Exceptions liegt darin, dass ein Gro\u00dfteil der built-in PHP Funktion Fehler werfen und keine Exceptions. Neuere Objektorientierte Bestandteile der PHP Standard Library hingegen werfen Exceptions und keine Fehler.","title":"Exceptions"},{"location":"php/07/#exception-hierarchie","text":"Die Elternklasse aller PHP Exceptions ist Throwable . Des weiteren gibt es eine Zweiteilung in Error und Exception Exceptions ( Error ist eine Exception mit Klassenname Error ). Error ist die Elternklasse alle PHP Fehler die intern in Exceptions \u00fcberf\u00fchrt werden. Exception ist die Elternklasse aller Exceptions, f\u00fcr eigene Exceptions sollte man diese Klasse als Elternklasse verwenden.","title":"Exception Hierarchie"},{"location":"php/07/#try-catch-blocke","text":"Try-catch Bl\u00f6cke k\u00f6nnen, wie aus anderen Programmiersprachen bekannt, verwendet werden: <?php try { // Beliebiger Code, welcher in einem try-catch Block abgewickelt werden soll } catch ( DivisionByZeroError $e ) { // ZB den Division durch 0 Fehler bearbeiten } catch ( ArgumentCountError $e ) { // ZB den falsche Anzahl an Funktionsargumenten Fehler bearbeiten } finally { // Finally wird immer ausgef\u00fchrt, egal ob es sich um eine Exception handelt oder nicht... }","title":"Try-catch Bl\u00f6cke"},{"location":"php/07/#error-handler","text":"F\u00fcr ein PHP-Programm kann ein sog. Error Handler angegeben werden, welcher ausgef\u00fchrt wird nachdem ein entsprechender Fehler aufgetreten ist. Damit kann die Entwicklerin bestimmen was beim Auftreten eines Fehlers im Programm passieren soll. An die Funktion set_error_handler kann eine Funktion \u00fcbergeben werden, welche beim Auftreten eines Fehler ausgef\u00fchrt wird. PHP \u00fcbergibt das Error Handling komplett an diese eigens definierte Funktion. Die moderne Praxis \u00fcberf\u00fchrt einen PHP Error in eine sog. ErrorException . Somit werden alle Fehler in fatale Laufzeitfehler \u00fcberf\u00fchrt ( E_ERROR ), da Exceptions immer fatale Laufzeitfehler sind. <?php set_error_handler ( function ( $severity , $message , $file , $line ) { throw new ErrorException ( $message , 0 , $severity , $file , $line ); });","title":"Error Handler"},{"location":"php/07/#exception-handler","text":"Analog zum Error Handler kann ein Exception Handler definiert werden. Der Exception Handler wird immer dann ausgef\u00fchrt, wenn eine Exception nicht getcatcht wurde (Nicht \u00fcber einen try-catch Block verarbeitet). Alle Exceptions die durch den \"Rost fallen\" k\u00f6nnen dadurch behandelt werden. Damit kann unter anderem sicher gestellt werden, dass keine Fehler f\u00fcr Benutzer sichtbar werden. Mit der Funktion set_exception_handler kann eine Funktion als Exception Handler \u00fcbergeben werden. Die Funktion bekommt die entsprechende Exception \u00fcbergeben: <?php set_exception_handler ( function ( Throwable $e ) { // Reaktion auf Exception ... });","title":"Exception Handler"},{"location":"php/08/","text":"Arbeiten mit Datenbanken PHP Data Objects (PDO) ist eine Datenbankabstraktionsschicht, welche einen einheitlichen Zugriff auf unterschiedliche DBMS \u00fcber eine Schnittstelle erm\u00f6glicht. Somit kann zB zur Entwicklungszeit SQLite verwendet werden und in der Produktivumgebung auf Oracle gesetzt werden. PDO bietet folgende Vorteile: Sicherheit: Escaping von Queryparameter \u00fcber Prepared Statements Usability: Viele n\u00fctzliche Funktionen um einen unproblematischen Zugriff auf das DBMS zu realisieren Wiederverwendbarkeit: Einheitliche API f\u00fcr den Zugriff auf unterschiedliche DBMS F\u00fcr die Arbeit mit PDO werden generell 2 Klassen ben\u00f6tigt. Die Klasse PDO als Einstiegspunkt und die Klasse PDOStatement , welche einzelne SQL-Statements repr\u00e4sentiert. Verbindung mit DSN Um die Verbindung zu einem DBMS aufzubauen wird ein g\u00fcltiger Data Source Name (DSN) ben\u00f6tigt. DSNs sind generell nach einem einfachen Schema aufgebaut. Dannach folgen unterschiedliche Verbindungsparameter als Schl\u00fcssel/Wert Paare mit ; getrennt. Als wichtige Verbindungsparameter sind dabei host , dbname , port und charset zu nennen. Im folgenden findet sich ein Beispiel eines DSN f\u00fcr eine Mysql-Datenbank mit dem Namen test auf Port 3306 und einem utf-8 Charset: mysql : host = localhost ; dbname = test ; port = 3306 ; charset = utf - 8 Mit der Klasse PDO kann die tats\u00e4chliche Verbindung zu einem DBMS \u00fcber den DSN aufgebaut werden. Je nach verwendetem DBMS sind ein g\u00fcltiger Username bzw. Passwort wichtige Erg\u00e4nzungen zum DSN. Im Folgenden Code-Abschnitt wird die Verbindung zu einer Mysql-Datenbank aufgebaut: <?php $dsn = \"mysql:host=localhost;dbname=test;port=3306;charset=utf-8\" ; $username = \"root\" ; $password = \"geheim\" ; try { $pdo = new PDO ( $dsn , $username , $password ); } catch ( Exception $e ) { echo \"ERROR: \" . $e -> getMessage (); } Die oben erzeugte Variable $pdo wird in den weiteren Quellcode-Abschnitten dieses Textes wiederverwendet. Exec und Query Die Klasse PDO bietet zwei generische Methoden ( exec und query ) um mit einer Datenbank zu arbeiten. Die Methode exec kann genutzt werden um ein SQL-Statement auszuf\u00fchren. Als Ergebnis liefert die Methode \"nur\" die Anzahl der Zeilen, welche durch das SQL-Statement betroffen worden sind. Im folgenden Beispiel wird ein DELETE-Statement mit exec ausgef\u00fchrt. Als Ergebnis wird die Anzahl der gel\u00f6schten Zeilen an die Variable $count zur\u00fcckgegeben: <?php $count = $pdo -> exec ( \"DELETE FROM products WHERE price > 10\" ); Die Methode query erzeugt eine Instanz der Klasse PDOStatement . Ein PDOStatement stellt unter anderem eine Ergebnismenge dar und kann iteriert werden: <?php $sql = \"SELECT * FROM products ORDER BY price\" ; foreach ( $pdo -> query ( $sql ) as $row ) { echo $row [ 'name' ] . \" \" . $row [ 'price' ] . \" \\n \" ; } Warning Die Methoden exec und query sollten nur f\u00fcr statische SQL-Statements verwendet werden. Variable Parameter werden nicht escaped und sind daher offen f\u00fcr SQL-Injections. Prepared Statements SQL-Queries ben\u00f6tigen h\u00e4ufig Parameter aus dem PHP-Programm. Unter anderem aus Sicherheitsgr\u00fcnden sollten dazu Prepared Statements genutzt werden. Im Beispiel sollen alle Attribute eines Produktes anhand der ID des Produktes abgefragt werden. Die ID des Produktes k\u00f6nnte zB \u00fcber den Querystring der URI an das PHP Programm \u00fcbergeben werden. Die Variable $pdo stellt eine g\u00fcltige Datenbankverbindung dar (siehe oben). Folgende Schritte werden im Skript durchgef\u00fchrt: Es wird ein Prepared Statement erzeugt (Methode prepare ). Mit ? werden Platzhalter f\u00fcr variable Bestandteile der SQL-Query definiert. Das erzeugte Prepared Statement kann \u00fcber die Methode execute ausgef\u00fchrt werden. Dabei wird ein Array \u00fcbergeben, dass alle definierten Platzhalter der Reihe nach ersetzt. Alle \u00fcbergebenen Werte werden escaped, sodass es zu keiner SQL-Injection kommen kann. Die Methode fetch kann genutzt werden um das Query-Resultat zeilenweise abzufragen. fetch gibt false zur\u00fcck, falls das Ergebnis leer ist. <?php $statement = $pdo -> prepare ( 'SELECT * FROM products WHERE id = ?' ); $statement -> execute ([ $_GET [ 'id' ]]); $product = $statement -> fetch (); INSERT Statement <?php $statement = $pdo -> prepare ( \"INSERT INTO products (name, description, price) VALUES (?, ?, ?)\" ); $statement -> execute ([ \"Tolles Produkt\" , \"Ein sch\u00f6nes Produkt mit vielen Extras...\" , 5.99 ]); UPDATE Statement <?php $statement = $pdo -> prepare ( \"UPDATE products SET name = ? WHERE id = ?\" ); $statement -> execute ([ \"Neuer Produktname\" , 13 ]); DELETE Statement <?php $statement = $pdo -> prepare ( \"DELETE FROM products WHERE id = ?\" ); $statement -> execute ([ 13 ]); CREATE Statement <?php $create = \"CREATE TABLE IF NOT EXISTS products ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, description TEXT NOT NULL, image TEXT NOT NULL, price REAL )\" ; $pdo -> exec ( $create ); Details zu Fetch Zeilenweises Auslesen Die Methode fetch liefert immer nur eine Ergebniszeile je Aufruf. Die Methode fungiert dabei wie ein Cursor und springt die Ergebnismenge zeilenweise durch. Mit einer Schleife kann somit durch die Ergebnismenge iteriert werden. Falls die Ergenbismenge leer ist oder der Cursor am Ende angekommen ist, liefert die Methode fetch false als R\u00fcckgabewert. <?php $stmt = $pdo -> prepare ( 'SELECT name, price FROM products' ); $stmt -> execute (); while ( $product = $stmt -> fetch ()) { echo $product [ 'name' ] . \": \u20ac \" . $product [ 'price' ] . \" \\n \" ; } Fetch Ergebniszeile Die Repr\u00e4sentation einer Ergebniszeile kann \u00fcber den sog. Fetch-Style angepasst werden. PDO bietet 11 verschiedene Fetch-Styles. Die wichtigsten sollen kurz zusammengefasst werden: FETCH_ASSOC : Das Ergebnis wird als assoziatives Array repr\u00e4sentiert. FETCH_NUM : Das Ergebnis wird als indexiertes Array repr\u00e4sentiert. FETCH_BOTH : Dies ist die default Einstellung. Eine Kombination aus FETCH_ASSOC und FETCH_NUM . FETCH_OBJ : Das Ergebnis wird als \"anonymes\" Objekt (der Klasse stdClass ) repr\u00e4sentiert. Die Spalten werden auf Objekteigenschaften gemappt. FETCH_LAZY : \u00c4hnlich zu FETCH_OBJ , die Attribute des Objektes werden jedoch erst zugewiesen, wenn sie abgefragt werden. FETCH_CLASS : Das Ergebnis wird innerhalb eines Objektes der entsprechenden Klasse repr\u00e4sentiert. Die Methode fetchObject kann komfortabel anstelle der Angabe des FETCH_OBJ oder FETCH_CLASS Style verwendet werden. Beispiel fetchObject <?php class Product { protected $id ; protected $name ; protected $price ; // ... getter/setter } $statement = $pdo -> prepare ( \"SELECT id, name, price FROM products\" ); $statement -> execute (); // $product ist eine Instanz der Klasse Product: $product = $statement -> fetchObject ( Product :: class ); Weitere Ressourcen Die PHP-Dokumentation bietet zu PDO und allen Klassen und Methoden eine ausf\u00fchrliche Beschreibung. Die Website phpdelusions.net bietet ein umfangreiches Tutorial zu PDO .","title":"Datenbanken"},{"location":"php/08/#arbeiten-mit-datenbanken","text":"PHP Data Objects (PDO) ist eine Datenbankabstraktionsschicht, welche einen einheitlichen Zugriff auf unterschiedliche DBMS \u00fcber eine Schnittstelle erm\u00f6glicht. Somit kann zB zur Entwicklungszeit SQLite verwendet werden und in der Produktivumgebung auf Oracle gesetzt werden. PDO bietet folgende Vorteile: Sicherheit: Escaping von Queryparameter \u00fcber Prepared Statements Usability: Viele n\u00fctzliche Funktionen um einen unproblematischen Zugriff auf das DBMS zu realisieren Wiederverwendbarkeit: Einheitliche API f\u00fcr den Zugriff auf unterschiedliche DBMS F\u00fcr die Arbeit mit PDO werden generell 2 Klassen ben\u00f6tigt. Die Klasse PDO als Einstiegspunkt und die Klasse PDOStatement , welche einzelne SQL-Statements repr\u00e4sentiert.","title":"Arbeiten mit Datenbanken"},{"location":"php/08/#verbindung-mit-dsn","text":"Um die Verbindung zu einem DBMS aufzubauen wird ein g\u00fcltiger Data Source Name (DSN) ben\u00f6tigt. DSNs sind generell nach einem einfachen Schema aufgebaut. Dannach folgen unterschiedliche Verbindungsparameter als Schl\u00fcssel/Wert Paare mit ; getrennt. Als wichtige Verbindungsparameter sind dabei host , dbname , port und charset zu nennen. Im folgenden findet sich ein Beispiel eines DSN f\u00fcr eine Mysql-Datenbank mit dem Namen test auf Port 3306 und einem utf-8 Charset: mysql : host = localhost ; dbname = test ; port = 3306 ; charset = utf - 8 Mit der Klasse PDO kann die tats\u00e4chliche Verbindung zu einem DBMS \u00fcber den DSN aufgebaut werden. Je nach verwendetem DBMS sind ein g\u00fcltiger Username bzw. Passwort wichtige Erg\u00e4nzungen zum DSN. Im Folgenden Code-Abschnitt wird die Verbindung zu einer Mysql-Datenbank aufgebaut: <?php $dsn = \"mysql:host=localhost;dbname=test;port=3306;charset=utf-8\" ; $username = \"root\" ; $password = \"geheim\" ; try { $pdo = new PDO ( $dsn , $username , $password ); } catch ( Exception $e ) { echo \"ERROR: \" . $e -> getMessage (); } Die oben erzeugte Variable $pdo wird in den weiteren Quellcode-Abschnitten dieses Textes wiederverwendet.","title":"Verbindung mit DSN"},{"location":"php/08/#exec-und-query","text":"Die Klasse PDO bietet zwei generische Methoden ( exec und query ) um mit einer Datenbank zu arbeiten. Die Methode exec kann genutzt werden um ein SQL-Statement auszuf\u00fchren. Als Ergebnis liefert die Methode \"nur\" die Anzahl der Zeilen, welche durch das SQL-Statement betroffen worden sind. Im folgenden Beispiel wird ein DELETE-Statement mit exec ausgef\u00fchrt. Als Ergebnis wird die Anzahl der gel\u00f6schten Zeilen an die Variable $count zur\u00fcckgegeben: <?php $count = $pdo -> exec ( \"DELETE FROM products WHERE price > 10\" ); Die Methode query erzeugt eine Instanz der Klasse PDOStatement . Ein PDOStatement stellt unter anderem eine Ergebnismenge dar und kann iteriert werden: <?php $sql = \"SELECT * FROM products ORDER BY price\" ; foreach ( $pdo -> query ( $sql ) as $row ) { echo $row [ 'name' ] . \" \" . $row [ 'price' ] . \" \\n \" ; } Warning Die Methoden exec und query sollten nur f\u00fcr statische SQL-Statements verwendet werden. Variable Parameter werden nicht escaped und sind daher offen f\u00fcr SQL-Injections.","title":"Exec und Query"},{"location":"php/08/#prepared-statements","text":"SQL-Queries ben\u00f6tigen h\u00e4ufig Parameter aus dem PHP-Programm. Unter anderem aus Sicherheitsgr\u00fcnden sollten dazu Prepared Statements genutzt werden. Im Beispiel sollen alle Attribute eines Produktes anhand der ID des Produktes abgefragt werden. Die ID des Produktes k\u00f6nnte zB \u00fcber den Querystring der URI an das PHP Programm \u00fcbergeben werden. Die Variable $pdo stellt eine g\u00fcltige Datenbankverbindung dar (siehe oben). Folgende Schritte werden im Skript durchgef\u00fchrt: Es wird ein Prepared Statement erzeugt (Methode prepare ). Mit ? werden Platzhalter f\u00fcr variable Bestandteile der SQL-Query definiert. Das erzeugte Prepared Statement kann \u00fcber die Methode execute ausgef\u00fchrt werden. Dabei wird ein Array \u00fcbergeben, dass alle definierten Platzhalter der Reihe nach ersetzt. Alle \u00fcbergebenen Werte werden escaped, sodass es zu keiner SQL-Injection kommen kann. Die Methode fetch kann genutzt werden um das Query-Resultat zeilenweise abzufragen. fetch gibt false zur\u00fcck, falls das Ergebnis leer ist. <?php $statement = $pdo -> prepare ( 'SELECT * FROM products WHERE id = ?' ); $statement -> execute ([ $_GET [ 'id' ]]); $product = $statement -> fetch ();","title":"Prepared Statements"},{"location":"php/08/#insert-statement","text":"<?php $statement = $pdo -> prepare ( \"INSERT INTO products (name, description, price) VALUES (?, ?, ?)\" ); $statement -> execute ([ \"Tolles Produkt\" , \"Ein sch\u00f6nes Produkt mit vielen Extras...\" , 5.99 ]);","title":"INSERT Statement"},{"location":"php/08/#update-statement","text":"<?php $statement = $pdo -> prepare ( \"UPDATE products SET name = ? WHERE id = ?\" ); $statement -> execute ([ \"Neuer Produktname\" , 13 ]);","title":"UPDATE Statement"},{"location":"php/08/#delete-statement","text":"<?php $statement = $pdo -> prepare ( \"DELETE FROM products WHERE id = ?\" ); $statement -> execute ([ 13 ]);","title":"DELETE Statement"},{"location":"php/08/#create-statement","text":"<?php $create = \"CREATE TABLE IF NOT EXISTS products ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, description TEXT NOT NULL, image TEXT NOT NULL, price REAL )\" ; $pdo -> exec ( $create );","title":"CREATE Statement"},{"location":"php/08/#details-zu-fetch","text":"","title":"Details zu Fetch"},{"location":"php/08/#zeilenweises-auslesen","text":"Die Methode fetch liefert immer nur eine Ergebniszeile je Aufruf. Die Methode fungiert dabei wie ein Cursor und springt die Ergebnismenge zeilenweise durch. Mit einer Schleife kann somit durch die Ergebnismenge iteriert werden. Falls die Ergenbismenge leer ist oder der Cursor am Ende angekommen ist, liefert die Methode fetch false als R\u00fcckgabewert. <?php $stmt = $pdo -> prepare ( 'SELECT name, price FROM products' ); $stmt -> execute (); while ( $product = $stmt -> fetch ()) { echo $product [ 'name' ] . \": \u20ac \" . $product [ 'price' ] . \" \\n \" ; }","title":"Zeilenweises Auslesen"},{"location":"php/08/#fetch-ergebniszeile","text":"Die Repr\u00e4sentation einer Ergebniszeile kann \u00fcber den sog. Fetch-Style angepasst werden. PDO bietet 11 verschiedene Fetch-Styles. Die wichtigsten sollen kurz zusammengefasst werden: FETCH_ASSOC : Das Ergebnis wird als assoziatives Array repr\u00e4sentiert. FETCH_NUM : Das Ergebnis wird als indexiertes Array repr\u00e4sentiert. FETCH_BOTH : Dies ist die default Einstellung. Eine Kombination aus FETCH_ASSOC und FETCH_NUM . FETCH_OBJ : Das Ergebnis wird als \"anonymes\" Objekt (der Klasse stdClass ) repr\u00e4sentiert. Die Spalten werden auf Objekteigenschaften gemappt. FETCH_LAZY : \u00c4hnlich zu FETCH_OBJ , die Attribute des Objektes werden jedoch erst zugewiesen, wenn sie abgefragt werden. FETCH_CLASS : Das Ergebnis wird innerhalb eines Objektes der entsprechenden Klasse repr\u00e4sentiert. Die Methode fetchObject kann komfortabel anstelle der Angabe des FETCH_OBJ oder FETCH_CLASS Style verwendet werden.","title":"Fetch Ergebniszeile"},{"location":"php/08/#beispiel-fetchobject","text":"<?php class Product { protected $id ; protected $name ; protected $price ; // ... getter/setter } $statement = $pdo -> prepare ( \"SELECT id, name, price FROM products\" ); $statement -> execute (); // $product ist eine Instanz der Klasse Product: $product = $statement -> fetchObject ( Product :: class );","title":"Beispiel fetchObject"},{"location":"php/08/#weitere-ressourcen","text":"Die PHP-Dokumentation bietet zu PDO und allen Klassen und Methoden eine ausf\u00fchrliche Beschreibung. Die Website phpdelusions.net bietet ein umfangreiches Tutorial zu PDO .","title":"Weitere Ressourcen"},{"location":"php/09/","text":"Quellcode einbinden Web-Applikationen bestehen auf vielen Quellcodedateien. PHP bietet unterschiedliche Mechanismen um die entsprechenden Dateien zu einzubinden. Anders als in JAVA muss sich die Entwicklerin um das Einbinden der ensprechenden Quellcodedateien k\u00fcmmern. Require/Include PHP bietet die Ausdr\u00fccke include und require um andere PHP-Dateien in einer PHP-Datei einzubinden. Beim Einbinden wird eine Datei nicht nur eingelesen sondern vom PHP-Interpreter auch ausgef\u00fchrt. Der Unterschied von include zu require besteht darin, dass include nur ein Warning erzeugt und require einen Fehler wirft (Programm Stop), falls eine Datei nicht existiert. Des weiteren gibt es auch die Ausdr\u00fccke include_once und require_once um zu verhindern, dass eine Datei mehrfach eingebunden wird. Info Generell sollte der Ausdruck require_once zum Einbinden von Dateien verwendet werden: Mehrfacheinbinden der selben Datei wird unterbunden Fehler werden sichbar da es zum Programm Abbruch kommt und k\u00f6nnen von der Entwicklerin behoben werden Au\u00dfer man will Fehlerbehandlung mit Exceptions durchf\u00fchren, dann sollte include_once verwendet werden. require_once erzeugt einen E_COMPILE_ERROR , welcher nicht in eine Exception \u00fcberf\u00fchrt werden kann, da dieser zur \"Kompilierzeit\" in der Programmausf\u00fchrung stattfindet. Aufbau einer Website Eine Website besteht generell aus Bestandteilen die sich auf allen Unterseiten wiederfinden. Wiederverwendbare Teile k\u00f6nnen \u00fcber require_once eingebunden werden. Das oben gezeigte Grundger\u00fcst einer Website w\u00fcrde \u00fcber folgendes PHP-Skript nachempfunden: <?php require_once 'header.php' ; ?> <aside> <?php require_once 'sidebar.php' ; ?> </aside> <main> <h1>News Artikel</h1> <p>bla bla ...</p> </main> <?php require_once 'footer.php' ; ?> Class-Autoloader Eine Web-Applikation kann aus vielen Klassen bestehen. Es ist sinnvoll jede Klasse innerhalb einer eigenen Datei zu hinterlegen. Um nicht jede einzelne Klasse einzeln \u00fcber einen require_once Aufruf einbinen zu m\u00fcssen, gibt es sog. Autoloader. Ein Autoloader ist eine Funktion, welche von der PHP-Laufzeitumgebung ausgef\u00fchrt wird, falls eine Klasse nicht gefunden wurde (Noch nicht eingebunden wurde!). Mit der Funktion kann das entsprechende Einbinden dann ausgef\u00fchrt werden. Mittels der Funktion spl_autoload_register Funktion kann ein entsprechender Autoloader f\u00fcr die PHP-Laufzeitumgebung definiert werden ( spl steht f\u00fcr Standard PHP Library). Im folgenden Beispiel wird werden alle Klassen der Applikation im Ordner classes abgelegt. Jede Klasse wird innerhalb einer Datei abgelegt, welche den selben Namen als die Klasse hat, jedoch komplett in Kleinbuchstaben: <?php spl_autoload_register ( function ( $classname ) { $filename = strtolower ( $classname ); require_once \"classes/\" . $filename . \".php\" ; });","title":"Quellcode einbinden"},{"location":"php/09/#quellcode-einbinden","text":"Web-Applikationen bestehen auf vielen Quellcodedateien. PHP bietet unterschiedliche Mechanismen um die entsprechenden Dateien zu einzubinden. Anders als in JAVA muss sich die Entwicklerin um das Einbinden der ensprechenden Quellcodedateien k\u00fcmmern.","title":"Quellcode einbinden"},{"location":"php/09/#requireinclude","text":"PHP bietet die Ausdr\u00fccke include und require um andere PHP-Dateien in einer PHP-Datei einzubinden. Beim Einbinden wird eine Datei nicht nur eingelesen sondern vom PHP-Interpreter auch ausgef\u00fchrt. Der Unterschied von include zu require besteht darin, dass include nur ein Warning erzeugt und require einen Fehler wirft (Programm Stop), falls eine Datei nicht existiert. Des weiteren gibt es auch die Ausdr\u00fccke include_once und require_once um zu verhindern, dass eine Datei mehrfach eingebunden wird. Info Generell sollte der Ausdruck require_once zum Einbinden von Dateien verwendet werden: Mehrfacheinbinden der selben Datei wird unterbunden Fehler werden sichbar da es zum Programm Abbruch kommt und k\u00f6nnen von der Entwicklerin behoben werden Au\u00dfer man will Fehlerbehandlung mit Exceptions durchf\u00fchren, dann sollte include_once verwendet werden. require_once erzeugt einen E_COMPILE_ERROR , welcher nicht in eine Exception \u00fcberf\u00fchrt werden kann, da dieser zur \"Kompilierzeit\" in der Programmausf\u00fchrung stattfindet.","title":"Require/Include"},{"location":"php/09/#aufbau-einer-website","text":"Eine Website besteht generell aus Bestandteilen die sich auf allen Unterseiten wiederfinden. Wiederverwendbare Teile k\u00f6nnen \u00fcber require_once eingebunden werden. Das oben gezeigte Grundger\u00fcst einer Website w\u00fcrde \u00fcber folgendes PHP-Skript nachempfunden: <?php require_once 'header.php' ; ?> <aside> <?php require_once 'sidebar.php' ; ?> </aside> <main> <h1>News Artikel</h1> <p>bla bla ...</p> </main> <?php require_once 'footer.php' ; ?>","title":"Aufbau einer Website"},{"location":"php/09/#class-autoloader","text":"Eine Web-Applikation kann aus vielen Klassen bestehen. Es ist sinnvoll jede Klasse innerhalb einer eigenen Datei zu hinterlegen. Um nicht jede einzelne Klasse einzeln \u00fcber einen require_once Aufruf einbinen zu m\u00fcssen, gibt es sog. Autoloader. Ein Autoloader ist eine Funktion, welche von der PHP-Laufzeitumgebung ausgef\u00fchrt wird, falls eine Klasse nicht gefunden wurde (Noch nicht eingebunden wurde!). Mit der Funktion kann das entsprechende Einbinden dann ausgef\u00fchrt werden. Mittels der Funktion spl_autoload_register Funktion kann ein entsprechender Autoloader f\u00fcr die PHP-Laufzeitumgebung definiert werden ( spl steht f\u00fcr Standard PHP Library). Im folgenden Beispiel wird werden alle Klassen der Applikation im Ordner classes abgelegt. Jede Klasse wird innerhalb einer Datei abgelegt, welche den selben Namen als die Klasse hat, jedoch komplett in Kleinbuchstaben: <?php spl_autoload_register ( function ( $classname ) { $filename = strtolower ( $classname ); require_once \"classes/\" . $filename . \".php\" ; });","title":"Class-Autoloader"},{"location":"tutorials/01/","text":"PHP Installation In diesem Tutorial wird die Installation von PHP f\u00fcr das Windows Betriebssystem beschrieben. Download Auf der PHP-Website ( php.net ) findet sich der Men\u00fcpunkt Downloads . Im oberen Bereich der Downloadseite befindet sich der Abschnitt Current Stable PHP . \u00dcber den Link Windows downloads erreicht man die PHP-Binaries f\u00fcr Windows. Je nach Prozessor gibt es eine x86 bzw. x64 Version (Normalerweise sollte dies x64 sein). Des weiteren kann zwischen einer Non Thread Safe bzw. einer Thread Safe Variante gew\u00e4hlt werden. Die Thread Safe Variante w\u00e4re zu w\u00e4hlen, wenn man PHP als Apache Modul nutzt. Falls PHP \u00fcber die Kommandozeile oder als CGI-Modul genutzt wird sollte die Non Thread Safe Variante gew\u00e4hlt werden. Info Das Zip Packet der x64 Non Thread Safe PHP-Binary Variante soll zum Download gew\u00e4hlt werden. Konfiguration Das Zip-Archiv soll in den Ordner C:\\php entpackt werden. Die Datei C:\\php\\php.exe soll demnach verf\u00fcgbar sein. Damit PHP \u00fcber die Kommandozeile ausgef\u00fchrt werden kann, muss der Ordner C:\\php zur Umgebungsvariable Path hinzugef\u00fcgt werden. Suchen Sie dazu im Windows Startmen\u00fc nach Erweiterten Systemeinstellungen (Shortcut: Windows-Taste + Pause). Mit dem Button Umgebungsvariablen... \u00f6ffnen Sie das Men\u00fc zur Verwaltung der Umgebungsvariablen. Im oberen Abschnitt der Umgebungsvariablen finden sich die Benutzervariablen (unten finden sich die Systemvariablen). In den Benutzervariablen sollte eine Variable Path existieren. Falls diese nicht existiert, sollte diese \u00fcber Neu... erstellt werden. Info F\u00fcgen Sie einen neuen Eintrag zur Umgebungsvariable Path mit dem Wert C:\\php hinzu. Test 1 \u00d6ffnen Sie die Powershell \u00fcber das Windows Startmen\u00fc . Setzen Sie den Befehl php --version in der Kommandozeile ab. Die Ausgabe sollte demnach ein \u00e4hnliches Bild liefern: > php --version PHP 7 . 4 . 2 ( cli ) ( built : Jan 21 2020 17 : 52 : 24 ) ( NTS Visual C ++ 2017 x64 ) Copyright ( c ) The PHP Group Zend Engine v3 . 4 . 0 , Copyright ( c ) Zend Technologies Test 2 Erstellen Sie innerhalb eines beliebigen von Ihnen gew\u00e4hlten Ordner eine Datei hello.php . F\u00fcgen Sie folgenden Quellcode in die Datei ein: <?php echo \"Hello PHP!\" ; Navigieren Sie \u00fcber die Kommandozeile in diesen Ordner ( cd ). F\u00fchren Sie das Skript mit dem Befehl php hello.php aus. Die Ausgabe auf der Kommandozeile sollte ein \u00e4hnliches Bild liefern: > php hello . php Hello PHP ! H\u00e4ufige Probleme Die Kommandozeile (zB Powershell) muss nachdem Umgebungsvariablen ver\u00e4ndert wurden neu geschlossen und neu gestartet werden. Die Datei php.exe muss im Pfad C:\\php\\php.exe liegen.","title":"PHP Installation"},{"location":"tutorials/01/#php-installation","text":"In diesem Tutorial wird die Installation von PHP f\u00fcr das Windows Betriebssystem beschrieben.","title":"PHP Installation"},{"location":"tutorials/01/#download","text":"Auf der PHP-Website ( php.net ) findet sich der Men\u00fcpunkt Downloads . Im oberen Bereich der Downloadseite befindet sich der Abschnitt Current Stable PHP . \u00dcber den Link Windows downloads erreicht man die PHP-Binaries f\u00fcr Windows. Je nach Prozessor gibt es eine x86 bzw. x64 Version (Normalerweise sollte dies x64 sein). Des weiteren kann zwischen einer Non Thread Safe bzw. einer Thread Safe Variante gew\u00e4hlt werden. Die Thread Safe Variante w\u00e4re zu w\u00e4hlen, wenn man PHP als Apache Modul nutzt. Falls PHP \u00fcber die Kommandozeile oder als CGI-Modul genutzt wird sollte die Non Thread Safe Variante gew\u00e4hlt werden. Info Das Zip Packet der x64 Non Thread Safe PHP-Binary Variante soll zum Download gew\u00e4hlt werden.","title":"Download"},{"location":"tutorials/01/#konfiguration","text":"Das Zip-Archiv soll in den Ordner C:\\php entpackt werden. Die Datei C:\\php\\php.exe soll demnach verf\u00fcgbar sein. Damit PHP \u00fcber die Kommandozeile ausgef\u00fchrt werden kann, muss der Ordner C:\\php zur Umgebungsvariable Path hinzugef\u00fcgt werden. Suchen Sie dazu im Windows Startmen\u00fc nach Erweiterten Systemeinstellungen (Shortcut: Windows-Taste + Pause). Mit dem Button Umgebungsvariablen... \u00f6ffnen Sie das Men\u00fc zur Verwaltung der Umgebungsvariablen. Im oberen Abschnitt der Umgebungsvariablen finden sich die Benutzervariablen (unten finden sich die Systemvariablen). In den Benutzervariablen sollte eine Variable Path existieren. Falls diese nicht existiert, sollte diese \u00fcber Neu... erstellt werden. Info F\u00fcgen Sie einen neuen Eintrag zur Umgebungsvariable Path mit dem Wert C:\\php hinzu.","title":"Konfiguration"},{"location":"tutorials/01/#test-1","text":"\u00d6ffnen Sie die Powershell \u00fcber das Windows Startmen\u00fc . Setzen Sie den Befehl php --version in der Kommandozeile ab. Die Ausgabe sollte demnach ein \u00e4hnliches Bild liefern: > php --version PHP 7 . 4 . 2 ( cli ) ( built : Jan 21 2020 17 : 52 : 24 ) ( NTS Visual C ++ 2017 x64 ) Copyright ( c ) The PHP Group Zend Engine v3 . 4 . 0 , Copyright ( c ) Zend Technologies","title":"Test 1"},{"location":"tutorials/01/#test-2","text":"Erstellen Sie innerhalb eines beliebigen von Ihnen gew\u00e4hlten Ordner eine Datei hello.php . F\u00fcgen Sie folgenden Quellcode in die Datei ein: <?php echo \"Hello PHP!\" ; Navigieren Sie \u00fcber die Kommandozeile in diesen Ordner ( cd ). F\u00fchren Sie das Skript mit dem Befehl php hello.php aus. Die Ausgabe auf der Kommandozeile sollte ein \u00e4hnliches Bild liefern: > php hello . php Hello PHP !","title":"Test 2"},{"location":"tutorials/01/#haufige-probleme","text":"Die Kommandozeile (zB Powershell) muss nachdem Umgebungsvariablen ver\u00e4ndert wurden neu geschlossen und neu gestartet werden. Die Datei php.exe muss im Pfad C:\\php\\php.exe liegen.","title":"H\u00e4ufige Probleme"},{"location":"tutorials/02/","text":"PHP Webserver PHP liefert einen Webserver in der Standardinstallation mit. Dieser Webserver ist rein zu Entwicklungs- und Testzwecken und sollte nicht in Produktivumgebungen genutzt werden. Die grunds\u00e4tzlichen Nutzungsm\u00f6glichkeiten dieses Web-Servers ist Inhalt dieses Tutorials. Einfache Nutzung Mit der Option -S <Adresse>:<Port> kann der Webserver gestartet werden. Als <Addresse> kann dabei eine IP-Adresse oder einfach localhost angegeben werden. Als <Port> muss ein freier Port am Rechner angegeben werden (zB 8080 ). Der Webserver kann innerhalb eines Ordners in der Kommandzeile gestartet werden. Der Ordner in dem der Webserver gestartet wird, fungiert dadurch als Webroot: > php - S localhost : 8080 Nachdem Start des Webserver sind alle Dateien und Ordner, welche sich im Webroot befinden \u00fcber den Webbrowser abrufbar. Alle Dateien mit Suffix .php werden entsprechend vom PHP-Interpreter verarbeitet. Anderer Webroot Mit der Option -t <Webroot> kann ein anderer Webroot gesetzt werden. Im folgenden Beispiel w\u00fcrde der Webroot C:\\mein_webroot gesetzt: > php - S localhost : 9000 - t C : \\ main_webroot Logging Zum Debugging kann es n\u00fctzlich sein, Log-Ausgaben auf der Kommandozeile zu \u00fcberwachen. Mit der PHP-Funktion error_log($message, $message_type=0) k\u00f6nnen Log-Ausgaben auf der Kommandozeile gemacht werden. Wichtig dabei ist, dass $message_type den Wert 4 bekommt, sonst gehen die Log-Ausgaben nicht auf die Kommandozeile. <?php error_log ( \"Meine Log-Ausgabe...\" , 4 ); Test Erstellen Sie eine Datei test.php innerhalb eines beliebigen Ordners. F\u00fcllen Sie die Datei mit folgendem Inhalt: <?php echo \"hello\" ; error_log ( \"Log Ausgabe ...\" , 4 ); Starten Sie den Webserver \u00fcber die entsprechenden Optionen auf der Kommandozeile. \u00d6ffnen Sie im Webbrowser die entsprechende URI (zB http://localhost:8080/test.php ), die Ausgabe auf der Kommandozeile sollte demnach ein \u00e4hnliches Bild liefern: > php - S localhost : 8080 [ Wed Feb 12 09 : 50 : 28 2020 ] PHP 7 . 4 . 2 Development Server ( http : // localhost : 8080 ) started [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Accepted [ Wed Feb 12 09 : 50 : 31 2020 ] Log Ausgabe ... [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 [ 200 ]: GET / test . php [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Closing H\u00e4ufige Probleme Es kann durchaus sein, dass der gew\u00fcnschte Port belegt ist. Sollte bei der Ansicht im Webbrowser irgendetwas unklares erscheinen andere Ports versuchen (zB 8081 , 9000 , etc).","title":"PHP Webserver"},{"location":"tutorials/02/#php-webserver","text":"PHP liefert einen Webserver in der Standardinstallation mit. Dieser Webserver ist rein zu Entwicklungs- und Testzwecken und sollte nicht in Produktivumgebungen genutzt werden. Die grunds\u00e4tzlichen Nutzungsm\u00f6glichkeiten dieses Web-Servers ist Inhalt dieses Tutorials.","title":"PHP Webserver"},{"location":"tutorials/02/#einfache-nutzung","text":"Mit der Option -S <Adresse>:<Port> kann der Webserver gestartet werden. Als <Addresse> kann dabei eine IP-Adresse oder einfach localhost angegeben werden. Als <Port> muss ein freier Port am Rechner angegeben werden (zB 8080 ). Der Webserver kann innerhalb eines Ordners in der Kommandzeile gestartet werden. Der Ordner in dem der Webserver gestartet wird, fungiert dadurch als Webroot: > php - S localhost : 8080 Nachdem Start des Webserver sind alle Dateien und Ordner, welche sich im Webroot befinden \u00fcber den Webbrowser abrufbar. Alle Dateien mit Suffix .php werden entsprechend vom PHP-Interpreter verarbeitet.","title":"Einfache Nutzung"},{"location":"tutorials/02/#anderer-webroot","text":"Mit der Option -t <Webroot> kann ein anderer Webroot gesetzt werden. Im folgenden Beispiel w\u00fcrde der Webroot C:\\mein_webroot gesetzt: > php - S localhost : 9000 - t C : \\ main_webroot","title":"Anderer Webroot"},{"location":"tutorials/02/#logging","text":"Zum Debugging kann es n\u00fctzlich sein, Log-Ausgaben auf der Kommandozeile zu \u00fcberwachen. Mit der PHP-Funktion error_log($message, $message_type=0) k\u00f6nnen Log-Ausgaben auf der Kommandozeile gemacht werden. Wichtig dabei ist, dass $message_type den Wert 4 bekommt, sonst gehen die Log-Ausgaben nicht auf die Kommandozeile. <?php error_log ( \"Meine Log-Ausgabe...\" , 4 );","title":"Logging"},{"location":"tutorials/02/#test","text":"Erstellen Sie eine Datei test.php innerhalb eines beliebigen Ordners. F\u00fcllen Sie die Datei mit folgendem Inhalt: <?php echo \"hello\" ; error_log ( \"Log Ausgabe ...\" , 4 ); Starten Sie den Webserver \u00fcber die entsprechenden Optionen auf der Kommandozeile. \u00d6ffnen Sie im Webbrowser die entsprechende URI (zB http://localhost:8080/test.php ), die Ausgabe auf der Kommandozeile sollte demnach ein \u00e4hnliches Bild liefern: > php - S localhost : 8080 [ Wed Feb 12 09 : 50 : 28 2020 ] PHP 7 . 4 . 2 Development Server ( http : // localhost : 8080 ) started [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Accepted [ Wed Feb 12 09 : 50 : 31 2020 ] Log Ausgabe ... [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 [ 200 ]: GET / test . php [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Closing","title":"Test"},{"location":"tutorials/02/#haufige-probleme","text":"Es kann durchaus sein, dass der gew\u00fcnschte Port belegt ist. Sollte bei der Ansicht im Webbrowser irgendetwas unklares erscheinen andere Ports versuchen (zB 8081 , 9000 , etc).","title":"H\u00e4ufige Probleme"},{"location":"tutorials/03/","text":"PHP Konfiguration Die PHP-Laufzeitumgebung wird \u00fcber eine ini-Datei konfiguriert. In diesem Tutorial wird erkl\u00e4rt wie Sie PHP \u00fcber eine ini-Datei konfigurieren und wie eine ini-Datei grunds\u00e4tzlich aufgebaut ist. php.ini PHP nutzt die Konfigurationsdatei mit dem Namen php.ini im Verzeichnis C:\\php als zentrale Konfigurationsdatei. Nach der Installation \u00fcber das Tutorial liegen im Ordner C:\\php 2 ini-Dateien als Vorlagen. php.ini-development als Konfiguration f\u00fcr einen Entwicklungsrechner und php.ini-production f\u00fcr eine produktive Umgebung. F\u00fcr Ihren Entwicklungsrechner soll die Datei php.ini-development in php.ini umbenannt werden. Dadurch wird diese Datei zur aktuellen Konfiguration der PHP-Laufzeitumgebung. Syntax der ini-Datei Die ini-Datei ist in Abschnitte gegliedert. Ein Abschnitt wird mit eckigen Klammern ausgewiesen. Zum Beispiel wird der Abschnitt um Konfigurationen zu PostgreSQL durchzuf\u00fchren als [PostgreSQL] angegeben. Eine ini-Datei kann Kommentare enthalten, diese werden \u00fcber das ; -Symbol angegeben. Eine Konfiguration wird als Schl\u00fcssel/Wert Paar angegeben (zB post_max_size = 8M ). Im folgenden findet sich ein beispielhafter Auszug einer ini-Datei: [PHP] ; Maximum size of POST data that PHP will accept. ; Its value may be 0 to disable the limit. It is ignored if POST data reading ; is disabled through enable_post_data_reading. ; http://php.net/post-max-size post_max_size = 8M [CLI Server] ; Whether the CLI web server uses ANSI color coding in its terminal output. cli_server.color = On Wichtige Konfigurationen Erweiterungen aktivieren Es gibt eine Vielzahl an Erweiterungen, welche mit PHP mitgeliefert werden. Diese Erweiterungen sind anf\u00e4nglich deaktiviert. Um eine spezielle Erweiterung zu aktivieren, muss der Kommentar zum entsprechenden Schl\u00fcssel/Wert Paar entfernt werden. Die Erweiterung zur Nutzung von SQLite ist deaktiviert. Suchen Sie dazu das Schl\u00fcssel/Wert Paar extension=pdo_sqlite : ;extension=pdo_sqlite Falls dieses mit einem Kommentar versehen ist wie im obigen Beispiel, entfernen Sie den Kommentar und die Erweiterung ist aktiviert: extension = pdo_sqlite Browscap aktivieren Browscap bietet die Funktion HTTP-Header von User-Agents auszuwerten. Jeder User-Agent ist \u00fcber einen speziellen \"User-Agent String\" identifiziert. Ein \"User-Agent String\" ist nicht standardisiert, mit Bibliothenk wie Browscap k\u00f6nnen wichtige Informationen aus diesen Strings extrahiert werden. Im folgenden findet sich ein Beispiel eines \"User-Agent Strings\". Dieses Beispiel stammt aus einem Firefox Browser auf einem Windows Desktop Rechner: Mozilla / 5 . 0 ( Windows NT 6 . 1 ; Win64 ; x64 ; rv : 47 . 0 ) Gecko / 20100101 Firefox / 47 . 0 Um in PHP Browscap zu aktivieren, muss (1) die aktuelle Browscap ini-Datei heruntergeladen werden und (2) muss diese \u00fcber die php.ini eingebunden werden. Laden Sie dazu die entsprechende ini-Datei der Browscap Website herunter ( php_browscap.ini ). Legen Sie die Datei in das Verzeichnis C:\\php Referenzieren Sie die ini-Datei \u00fcber eine absolute Pfadangabe in der php.ini . \u00c4ndern Sie dazu die die php.ini an der entsprechenden Stelle folgend ab: [browscap] ; http://php.net/browscap browscap = C:/php/php_browscap.ini Konfigurations\u00fcbersicht Um die Konfiguration einer PHP-Laufzeitumgebung einzusehen und zu pr\u00fcfen, biete PHP die Funktion phpinfo . Erstellen Sie eine Datei index.php innerhalb eines beliebigen Ordners. Der Inhalt der index.php soll folgenden Quellcode enthalten: <?php phpinfo (); Starten Sie einen lokalen Web-Server und \u00f6ffnen Sie die index.php Datei \u00fcber den Web-Browser. Es sollte eine Website erscheinen die dem Screenshot entspricht. Sie finden darauf alle Konfigurationen strukturiert aufgelistet, welche in der php.ini vorgenommen sind. H\u00e4ufige Probleme Falls der Web-Server gestartet ist, w\u00e4hrend eine Konfiguration ge\u00e4ndert wird, muss der Web-Server gestoppt und neu gestartet werden. F\u00fcr CLI-Skripte ist kein Neustart erforderlich.","title":"PHP Konfiguration"},{"location":"tutorials/03/#php-konfiguration","text":"Die PHP-Laufzeitumgebung wird \u00fcber eine ini-Datei konfiguriert. In diesem Tutorial wird erkl\u00e4rt wie Sie PHP \u00fcber eine ini-Datei konfigurieren und wie eine ini-Datei grunds\u00e4tzlich aufgebaut ist.","title":"PHP Konfiguration"},{"location":"tutorials/03/#phpini","text":"PHP nutzt die Konfigurationsdatei mit dem Namen php.ini im Verzeichnis C:\\php als zentrale Konfigurationsdatei. Nach der Installation \u00fcber das Tutorial liegen im Ordner C:\\php 2 ini-Dateien als Vorlagen. php.ini-development als Konfiguration f\u00fcr einen Entwicklungsrechner und php.ini-production f\u00fcr eine produktive Umgebung. F\u00fcr Ihren Entwicklungsrechner soll die Datei php.ini-development in php.ini umbenannt werden. Dadurch wird diese Datei zur aktuellen Konfiguration der PHP-Laufzeitumgebung.","title":"php.ini"},{"location":"tutorials/03/#syntax-der-ini-datei","text":"Die ini-Datei ist in Abschnitte gegliedert. Ein Abschnitt wird mit eckigen Klammern ausgewiesen. Zum Beispiel wird der Abschnitt um Konfigurationen zu PostgreSQL durchzuf\u00fchren als [PostgreSQL] angegeben. Eine ini-Datei kann Kommentare enthalten, diese werden \u00fcber das ; -Symbol angegeben. Eine Konfiguration wird als Schl\u00fcssel/Wert Paar angegeben (zB post_max_size = 8M ). Im folgenden findet sich ein beispielhafter Auszug einer ini-Datei: [PHP] ; Maximum size of POST data that PHP will accept. ; Its value may be 0 to disable the limit. It is ignored if POST data reading ; is disabled through enable_post_data_reading. ; http://php.net/post-max-size post_max_size = 8M [CLI Server] ; Whether the CLI web server uses ANSI color coding in its terminal output. cli_server.color = On","title":"Syntax der ini-Datei"},{"location":"tutorials/03/#wichtige-konfigurationen","text":"","title":"Wichtige Konfigurationen"},{"location":"tutorials/03/#erweiterungen-aktivieren","text":"Es gibt eine Vielzahl an Erweiterungen, welche mit PHP mitgeliefert werden. Diese Erweiterungen sind anf\u00e4nglich deaktiviert. Um eine spezielle Erweiterung zu aktivieren, muss der Kommentar zum entsprechenden Schl\u00fcssel/Wert Paar entfernt werden. Die Erweiterung zur Nutzung von SQLite ist deaktiviert. Suchen Sie dazu das Schl\u00fcssel/Wert Paar extension=pdo_sqlite : ;extension=pdo_sqlite Falls dieses mit einem Kommentar versehen ist wie im obigen Beispiel, entfernen Sie den Kommentar und die Erweiterung ist aktiviert: extension = pdo_sqlite","title":"Erweiterungen aktivieren"},{"location":"tutorials/03/#browscap-aktivieren","text":"Browscap bietet die Funktion HTTP-Header von User-Agents auszuwerten. Jeder User-Agent ist \u00fcber einen speziellen \"User-Agent String\" identifiziert. Ein \"User-Agent String\" ist nicht standardisiert, mit Bibliothenk wie Browscap k\u00f6nnen wichtige Informationen aus diesen Strings extrahiert werden. Im folgenden findet sich ein Beispiel eines \"User-Agent Strings\". Dieses Beispiel stammt aus einem Firefox Browser auf einem Windows Desktop Rechner: Mozilla / 5 . 0 ( Windows NT 6 . 1 ; Win64 ; x64 ; rv : 47 . 0 ) Gecko / 20100101 Firefox / 47 . 0 Um in PHP Browscap zu aktivieren, muss (1) die aktuelle Browscap ini-Datei heruntergeladen werden und (2) muss diese \u00fcber die php.ini eingebunden werden. Laden Sie dazu die entsprechende ini-Datei der Browscap Website herunter ( php_browscap.ini ). Legen Sie die Datei in das Verzeichnis C:\\php Referenzieren Sie die ini-Datei \u00fcber eine absolute Pfadangabe in der php.ini . \u00c4ndern Sie dazu die die php.ini an der entsprechenden Stelle folgend ab: [browscap] ; http://php.net/browscap browscap = C:/php/php_browscap.ini","title":"Browscap aktivieren"},{"location":"tutorials/03/#konfigurationsubersicht","text":"Um die Konfiguration einer PHP-Laufzeitumgebung einzusehen und zu pr\u00fcfen, biete PHP die Funktion phpinfo . Erstellen Sie eine Datei index.php innerhalb eines beliebigen Ordners. Der Inhalt der index.php soll folgenden Quellcode enthalten: <?php phpinfo (); Starten Sie einen lokalen Web-Server und \u00f6ffnen Sie die index.php Datei \u00fcber den Web-Browser. Es sollte eine Website erscheinen die dem Screenshot entspricht. Sie finden darauf alle Konfigurationen strukturiert aufgelistet, welche in der php.ini vorgenommen sind.","title":"Konfigurations\u00fcbersicht"},{"location":"tutorials/03/#haufige-probleme","text":"Falls der Web-Server gestartet ist, w\u00e4hrend eine Konfiguration ge\u00e4ndert wird, muss der Web-Server gestoppt und neu gestartet werden. F\u00fcr CLI-Skripte ist kein Neustart erforderlich.","title":"H\u00e4ufige Probleme"},{"location":"tutorials/04/","text":"Arbeiten mit SQLite In diesem Tutorial wird erkl\u00e4rt wie Sie mit PHP eine SQLite Datenbank nutzen k\u00f6nnen. php.ini anpassen Damit SQLite innerhalb eines PHP-Programms genutzt werden kann, muss die SQLite-Extension innerhalb der php.ini aktiviert werden. Suchen Sie dazu innerhalb der php.ini nach der pdo_sqlite bzw. sqlite3 Extension und aktivieren diese. ; extension = pdo_sqlite ; extension = sqlite3 Entfernen Sie dazu einfach den Kommentar ; : extension = pdo_sqlite extension = sqlite3 DSN SQLite speichert die Datenbank innerhalb einer Datei. Es ist kein Username/Passwort notwendig um eine SQLite Datenbank zu erzeugen bzw. zu \u00f6ffnen. Der DSN spezifiziert dabei nur den Treiber und den Dateinamen zur Datenbank: sqlite : my_local_db . sqlite Datenbank Browser Um bestehende SQLite Datenbank-Dateien zu inspizieren kann der DB Browser for SQLite verwendet werden. Der Datenbank Browser ist eine Desktop-App, welche entsprechende SQLite-Dateien \u00f6ffnen kann. Im Datenbank Browser sind alle Tabellen und Tabellen Inhalte ersichtlich und ver\u00e4nderbar. Test Erstellen Sie eine Datei test.php innerhalb eines beliebigen Ordners. F\u00fcllen Sie die Datei mit folgendem Inhalt: <?php $pdo = PDO ( \"sqlite:my_test_db.sqlite\" ); $pdo -> exec ( \" CREATE TABLE IF NOT EXISTS products ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, price REAL ) \" ); F\u00fchren Sie das Skript aus: > php test.php Im Ordner des Skripts sollte eine Datei mit dem Namen my_test_db.sqlite entstanden sein. Diese Datei repr\u00e4sentiert die SQLite Datenbank. \u00d6ffnen Sie die Datei mit dem DB Browser for SQLite und vergewissern Sie sich, ob die Tabelle products mit den 3 Spalten id , name und price entsprechend erzeugt wurde.","title":"Arbeiten mit SQLite"},{"location":"tutorials/04/#arbeiten-mit-sqlite","text":"In diesem Tutorial wird erkl\u00e4rt wie Sie mit PHP eine SQLite Datenbank nutzen k\u00f6nnen.","title":"Arbeiten mit SQLite"},{"location":"tutorials/04/#phpini-anpassen","text":"Damit SQLite innerhalb eines PHP-Programms genutzt werden kann, muss die SQLite-Extension innerhalb der php.ini aktiviert werden. Suchen Sie dazu innerhalb der php.ini nach der pdo_sqlite bzw. sqlite3 Extension und aktivieren diese. ; extension = pdo_sqlite ; extension = sqlite3 Entfernen Sie dazu einfach den Kommentar ; : extension = pdo_sqlite extension = sqlite3","title":"php.ini anpassen"},{"location":"tutorials/04/#dsn","text":"SQLite speichert die Datenbank innerhalb einer Datei. Es ist kein Username/Passwort notwendig um eine SQLite Datenbank zu erzeugen bzw. zu \u00f6ffnen. Der DSN spezifiziert dabei nur den Treiber und den Dateinamen zur Datenbank: sqlite : my_local_db . sqlite","title":"DSN"},{"location":"tutorials/04/#datenbank-browser","text":"Um bestehende SQLite Datenbank-Dateien zu inspizieren kann der DB Browser for SQLite verwendet werden. Der Datenbank Browser ist eine Desktop-App, welche entsprechende SQLite-Dateien \u00f6ffnen kann. Im Datenbank Browser sind alle Tabellen und Tabellen Inhalte ersichtlich und ver\u00e4nderbar.","title":"Datenbank Browser"},{"location":"tutorials/04/#test","text":"Erstellen Sie eine Datei test.php innerhalb eines beliebigen Ordners. F\u00fcllen Sie die Datei mit folgendem Inhalt: <?php $pdo = PDO ( \"sqlite:my_test_db.sqlite\" ); $pdo -> exec ( \" CREATE TABLE IF NOT EXISTS products ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, price REAL ) \" ); F\u00fchren Sie das Skript aus: > php test.php Im Ordner des Skripts sollte eine Datei mit dem Namen my_test_db.sqlite entstanden sein. Diese Datei repr\u00e4sentiert die SQLite Datenbank. \u00d6ffnen Sie die Datei mit dem DB Browser for SQLite und vergewissern Sie sich, ob die Tabelle products mit den 3 Spalten id , name und price entsprechend erzeugt wurde.","title":"Test"},{"location":"tutorials/05/","text":"Arbeiten mit Composer Projekt Abh\u00e4ngigkeiten Web-Applikationen werden meist nicht komplett \"from scratch\" programmiert. Bestehende externe Bibliotheken oder Frameworks werden innerhalb der Applikation genutzt. Diese externen Bibliotheken nennt man Projekt Abh\u00e4ngigkeiten und m\u00fcssen im Projekt verwaltet werden. F\u00fcr alle Programmiersprachen gibt es entsprechende Programme, welche die Verwaltung der Abh\u00e4ngigkeiten bewerkstelligen. Bekannt sind unter anderem npm f\u00fcr javascript , gradle f\u00fcr java oder pip f\u00fcr python . F\u00fcr PHP gibt es composer . Innerhalb eines Composer-Projektes gibt es die Datei composer.json in dieser sind alle Projekt Abh\u00e4ngigkeiten aufgef\u00fchrt mit Name und Version. Dabei wird zwischen Projekt Abh\u00e4ngigkeiten ( require ) und Abh\u00e4ngigkeiten f\u00fcr die Entwicklungszeit ( require-dev ) unterschieden. composer.json { \"require\" : { \"monolog/monolog\" : \"2.0.2\" } } Windows Installation Composer kann \u00fcber einen Windows-Installer installiert werden. Dieser kann \u00fcber die Composer Website heruntergeladen werden. Versionierung Dokumentation Composer bietet eine umfangreiche Dokumentation","title":"Arbeiten mit Composer"},{"location":"tutorials/05/#arbeiten-mit-composer","text":"","title":"Arbeiten mit Composer"},{"location":"tutorials/05/#projekt-abhangigkeiten","text":"Web-Applikationen werden meist nicht komplett \"from scratch\" programmiert. Bestehende externe Bibliotheken oder Frameworks werden innerhalb der Applikation genutzt. Diese externen Bibliotheken nennt man Projekt Abh\u00e4ngigkeiten und m\u00fcssen im Projekt verwaltet werden. F\u00fcr alle Programmiersprachen gibt es entsprechende Programme, welche die Verwaltung der Abh\u00e4ngigkeiten bewerkstelligen. Bekannt sind unter anderem npm f\u00fcr javascript , gradle f\u00fcr java oder pip f\u00fcr python . F\u00fcr PHP gibt es composer . Innerhalb eines Composer-Projektes gibt es die Datei composer.json in dieser sind alle Projekt Abh\u00e4ngigkeiten aufgef\u00fchrt mit Name und Version. Dabei wird zwischen Projekt Abh\u00e4ngigkeiten ( require ) und Abh\u00e4ngigkeiten f\u00fcr die Entwicklungszeit ( require-dev ) unterschieden.","title":"Projekt Abh\u00e4ngigkeiten"},{"location":"tutorials/05/#composerjson","text":"{ \"require\" : { \"monolog/monolog\" : \"2.0.2\" } }","title":"composer.json"},{"location":"tutorials/05/#windows-installation","text":"Composer kann \u00fcber einen Windows-Installer installiert werden. Dieser kann \u00fcber die Composer Website heruntergeladen werden.","title":"Windows Installation"},{"location":"tutorials/05/#versionierung","text":"","title":"Versionierung"},{"location":"tutorials/05/#dokumentation","text":"Composer bietet eine umfangreiche Dokumentation","title":"Dokumentation"}]}