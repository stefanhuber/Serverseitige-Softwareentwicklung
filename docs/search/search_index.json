{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Serverseitige Softwareentwicklung PHP Grundlagen Arrays Superglobals Funktionen Objektorientierte Programmierung Tutorials PHP Installation PHP Webserver PHP Konfiguration Mitwirkung Das gesamte Skriptum inkl. \u00dcbungen findet sich innerhalb eines GIT-Repositories auf der Plattform Github. \u00dcber sog. Pull-Requests k\u00f6nnen \u00c4nderungen am Inhalt durchgef\u00fchrt werden. Etwaige Rechtschreibfehler oder Grammatikfehler k\u00f6nnen nat\u00fcrlich gerne ausgebessert werden. \u00c4nderungsvorschl\u00e4ge und Erg\u00e4nzungen k\u00f6nnen auch gerne als Issue angegeben werden.","title":"Home"},{"location":"#serverseitige-softwareentwicklung","text":"","title":"Serverseitige Softwareentwicklung"},{"location":"#php","text":"Grundlagen Arrays Superglobals Funktionen Objektorientierte Programmierung","title":"PHP"},{"location":"#tutorials","text":"PHP Installation PHP Webserver PHP Konfiguration","title":"Tutorials"},{"location":"#mitwirkung","text":"Das gesamte Skriptum inkl. \u00dcbungen findet sich innerhalb eines GIT-Repositories auf der Plattform Github. \u00dcber sog. Pull-Requests k\u00f6nnen \u00c4nderungen am Inhalt durchgef\u00fchrt werden. Etwaige Rechtschreibfehler oder Grammatikfehler k\u00f6nnen nat\u00fcrlich gerne ausgebessert werden. \u00c4nderungsvorschl\u00e4ge und Erg\u00e4nzungen k\u00f6nnen auch gerne als Issue angegeben werden.","title":"Mitwirkung"},{"location":"php/01/","text":"Grundlagen Erstes Beispiel PHP-Code wird innerhalb einer Textdatei mit Suffix .php geschrieben. PHP-Skripte beginnen mit dem sog. PHP-Tag <?php . Falls die Textdatei noch weitere Inhalte (zB HTML) enth\u00e4lt kann PHP-Code auch Blockweise eingef\u00fcgt werden, daf\u00fcr m\u00fcssen Bl\u00f6cke mit <?php ge\u00f6ffnet und ?> beendet werden. Jede Anweisungszeile in PHP muss mit einem Semikolon ( ; ) abgeschlossen werden. Ausgaben werden \u00fcber den echo Befehl durchgef\u00fchrt. <?php echo \"Hallo PHP!\" ; PHP kann als Skript \u00fcber den PHP-Interpreter auf der Kommandozeile ausgef\u00fchrt werden. Dazu wird der PHP-Interpreter auf der Kommondozeile ausgef\u00fchrt und das auszuf\u00fchrende Skript wird als Argument an den Interpreter \u00fcbergeben: > php example.php Hallo PHP! PHP in HTML einbetten PHP kann innerhalb eines HTML-Dokuments eingebettet werden. Die Quellcode-Datei muss mit dem Suffix .php abgespeichert werden, sodass der PHP-Interpreter die Datei verarbeitet. PHP-Code wird innerhalb von PHP-Tags <?php und ?> eingef\u00fcgt. Der PHP-Code wird am Web-Server verarbeitet und nicht an den Web-Client gesendet. <html> <head> <title>Hallo PHP</title> </head> <body> <?php // Ein Kommentar: Dieser wird nicht ins HTML geschrieben echo \"Hallo PHP!\" ; ?> </body> </html> Kommentare Im PHP-Quellcode k\u00f6nnen nat\u00fcrlich auch Kommentare eingef\u00fcgt werden. Es gibt einzeilige- und mehrzeilige Kommentare: <?php // einzeiliger Kommentar # auch ein einzeiliger Kommentar /* mehrzeiliger Kommentar ... */ Variablen Eine Variable in PHP wird mit $ -Zeichen eingeleitet und es folgt ein Variablenbezeichner. Folgende weitere Regeln sind zu beachten: Ein Variablenname muss mit einem Buchstaben oder Unterstrich starten Ab der zweiten Stelle kann ein Variablenname auch Zahlen enthalten Variablennamen sind case-sensitive ( $var und $VAR sind verschiedene Varialben) <?php $my_var = 123 ; $message = \"hello world\" ; Datentypen PHP ist eine dynamisch Typisierte Sprache. Das bedeutet es m\u00fcssen keine Datentypen f\u00fcr Variablen angegeben werden, diese werden vom PHP-Interpreter abgeleitet. Dennoch legt PHP 10 verschiedene Datentypen fest, welche einer Variable implizit entsprechen. Einfache Datentypen: boolean , integer , float und string Zusammengesetzte Datentypen: array , object , iterable und callable Spezielle Datentypen: resource , NULL Die Funktion var_dump kann verwendet werden um den Wert und den Datentyp einer Variable auszugeben. Dies ist hilfreich f\u00fcr das Debugging: <?php $a = 3.1 ; $b = true ; var_dump ( $a ); // float(3.1) var_dump ( $b ); // bool(true) Boolean Generell interpretiert PHP alles als true au\u00dfer: den boolschen Wert false die Zahlen 0 , -0 , 0.0 , -0.0 den Leerstring \"\" und \"0\" ein leeres Array [] NULL Casting PHP unterst\u00fctzt f\u00fcr jeden Datentyp und weitere F\u00e4lle eine is_* Funktion. Es kann zB mit der Funktion is_int gepr\u00fcft werden, ob eine Variable dem Datentyp integer entspricht. <?php $a = \"abc\" ; $b = 123 ; echo is_null ( $a ); // false echo is_string ( $a ); // true echo is_float ( $b ) // false Es kann der Datentyp einer Variable durch Casting explizit ver\u00e4ndert werden: <?php $var1 = 10 ; $var2 = ( bool ) $var1 ; var_dump ( $var2 ) // bool(true) Folgende Casting Operationen sind definiert: (int) , (integer) in Integer casten (bool) , (boolean) in Boolean casten (float) , (double) , (real) in Float casten (string) in String casten (array) in Array casten (object) in Objekt casten Operatoren PHP verf\u00fcgt \u00fcber alle g\u00e4ngigen Operatoren, wie sie aus anderen Programmiersprachen bekannt sind. Einige wichtige Erg\u00e4nzungen: Operator Bezeichnung . String Konkatenation ?? Null-Coalesing Operator ?: Elvis Operator <=> Spaceship Operator === Vergleichsoperator: Wert und Datentyp String Konkatenation <?php $str = \"abc\" ; $res = $str . \"-\" . \"def\" ; echo $res ; // abc-def Null-Coalesing Operator Zuweisung eines Default-Wertes f\u00fcr eine Variable. Der erste Wert der existiert und nicht NULL ist. Im Beispiel ist $z nicht definiert, $a hat den Wert NULL und $b den Wert 10 . Die Null-Coalesing Kette wird solange durchgef\u00fchrt bis ein g\u00fcltiger Wert gefunden wird. <?php $a = NULL ; $b = 10 ; $c = $z ?? $a ?? $b ; echo $c ; // 10 Elvis Operator Der Elvis Operator ist eine Vereinfachung des bekannten tern\u00e4ren Operators: linker Ausdruck ?: rechter Ausdruck . Die Logik ist dabei so gestaltet, dass wenn der linke Ausdruck als wahr interpretiert wird, dieser zur\u00fcckgegeben wird ansonsten der rechte Ausdruck (als Alternative). <?php $a = 5 ?: 10 ; $b = 0 ?: 10 ; echo $a ; // 5 echo $b ; // 10 Spaceship Operator Der Spaceship Operator ist ein spezieller Operator um Ausdr\u00fccke zu vergleichen. Dieser gibt die Werte -1 , 0 oder 1 zur\u00fcck, jenachdem ob der erste Ausdruck kleiner, gleich oder gr\u00f6\u00dfer als der zweite Audruck ist. Der Spaceship Operator kann auch f\u00fcr Strings verwendet werden: <?php echo 1 <=> 1 ; // 0 echo 1 <=> 0 ; // 1 echo 0 <=> 1 ; // -1 echo \"a\" <=> \"a\" ; // 0 echo \"z\" <=> \"a\" ; // 1 echo \"a\" <=> \"z\" ; // -1 Vergleichsoperator Generell sind 2 Vergleichsoperatoren zu unterscheiden == und === . Erster untersucht nur ob zwei Werte identisch sind, so w\u00e4re \"5\" == 5 wahr. Der zweite Vergleichoperator untersucht jedoch auch, ob die 2 Operanden den selben Datentyp haben, somit w\u00e4re \"5\" === 5 falsch. Bedingte Ausdr\u00fccke <?php $var = 10 if ( $var == 5 ) { echo \"Der Wert ist 5\" ; } elif ( $var < 5 ) { echo \"Der Wert ist kleiner als 5\" ; } else { echo \"Der Wert ist gr\u00f6\u00dfer als 5\" ; } PHP verf\u00fcgt auch \u00fcber einen switch -Ausdruck, dieser kann in der PHP-Dokumentation nachgelesen werden.","title":"Grundlagen"},{"location":"php/01/#grundlagen","text":"","title":"Grundlagen"},{"location":"php/01/#erstes-beispiel","text":"PHP-Code wird innerhalb einer Textdatei mit Suffix .php geschrieben. PHP-Skripte beginnen mit dem sog. PHP-Tag <?php . Falls die Textdatei noch weitere Inhalte (zB HTML) enth\u00e4lt kann PHP-Code auch Blockweise eingef\u00fcgt werden, daf\u00fcr m\u00fcssen Bl\u00f6cke mit <?php ge\u00f6ffnet und ?> beendet werden. Jede Anweisungszeile in PHP muss mit einem Semikolon ( ; ) abgeschlossen werden. Ausgaben werden \u00fcber den echo Befehl durchgef\u00fchrt. <?php echo \"Hallo PHP!\" ; PHP kann als Skript \u00fcber den PHP-Interpreter auf der Kommandozeile ausgef\u00fchrt werden. Dazu wird der PHP-Interpreter auf der Kommondozeile ausgef\u00fchrt und das auszuf\u00fchrende Skript wird als Argument an den Interpreter \u00fcbergeben: > php example.php Hallo PHP!","title":"Erstes Beispiel"},{"location":"php/01/#php-in-html-einbetten","text":"PHP kann innerhalb eines HTML-Dokuments eingebettet werden. Die Quellcode-Datei muss mit dem Suffix .php abgespeichert werden, sodass der PHP-Interpreter die Datei verarbeitet. PHP-Code wird innerhalb von PHP-Tags <?php und ?> eingef\u00fcgt. Der PHP-Code wird am Web-Server verarbeitet und nicht an den Web-Client gesendet. <html> <head> <title>Hallo PHP</title> </head> <body> <?php // Ein Kommentar: Dieser wird nicht ins HTML geschrieben echo \"Hallo PHP!\" ; ?> </body> </html>","title":"PHP in HTML einbetten"},{"location":"php/01/#kommentare","text":"Im PHP-Quellcode k\u00f6nnen nat\u00fcrlich auch Kommentare eingef\u00fcgt werden. Es gibt einzeilige- und mehrzeilige Kommentare: <?php // einzeiliger Kommentar # auch ein einzeiliger Kommentar /* mehrzeiliger Kommentar ... */","title":"Kommentare"},{"location":"php/01/#variablen","text":"Eine Variable in PHP wird mit $ -Zeichen eingeleitet und es folgt ein Variablenbezeichner. Folgende weitere Regeln sind zu beachten: Ein Variablenname muss mit einem Buchstaben oder Unterstrich starten Ab der zweiten Stelle kann ein Variablenname auch Zahlen enthalten Variablennamen sind case-sensitive ( $var und $VAR sind verschiedene Varialben) <?php $my_var = 123 ; $message = \"hello world\" ;","title":"Variablen"},{"location":"php/01/#datentypen","text":"PHP ist eine dynamisch Typisierte Sprache. Das bedeutet es m\u00fcssen keine Datentypen f\u00fcr Variablen angegeben werden, diese werden vom PHP-Interpreter abgeleitet. Dennoch legt PHP 10 verschiedene Datentypen fest, welche einer Variable implizit entsprechen. Einfache Datentypen: boolean , integer , float und string Zusammengesetzte Datentypen: array , object , iterable und callable Spezielle Datentypen: resource , NULL Die Funktion var_dump kann verwendet werden um den Wert und den Datentyp einer Variable auszugeben. Dies ist hilfreich f\u00fcr das Debugging: <?php $a = 3.1 ; $b = true ; var_dump ( $a ); // float(3.1) var_dump ( $b ); // bool(true)","title":"Datentypen"},{"location":"php/01/#boolean","text":"Generell interpretiert PHP alles als true au\u00dfer: den boolschen Wert false die Zahlen 0 , -0 , 0.0 , -0.0 den Leerstring \"\" und \"0\" ein leeres Array [] NULL","title":"Boolean"},{"location":"php/01/#casting","text":"PHP unterst\u00fctzt f\u00fcr jeden Datentyp und weitere F\u00e4lle eine is_* Funktion. Es kann zB mit der Funktion is_int gepr\u00fcft werden, ob eine Variable dem Datentyp integer entspricht. <?php $a = \"abc\" ; $b = 123 ; echo is_null ( $a ); // false echo is_string ( $a ); // true echo is_float ( $b ) // false Es kann der Datentyp einer Variable durch Casting explizit ver\u00e4ndert werden: <?php $var1 = 10 ; $var2 = ( bool ) $var1 ; var_dump ( $var2 ) // bool(true) Folgende Casting Operationen sind definiert: (int) , (integer) in Integer casten (bool) , (boolean) in Boolean casten (float) , (double) , (real) in Float casten (string) in String casten (array) in Array casten (object) in Objekt casten","title":"Casting"},{"location":"php/01/#operatoren","text":"PHP verf\u00fcgt \u00fcber alle g\u00e4ngigen Operatoren, wie sie aus anderen Programmiersprachen bekannt sind. Einige wichtige Erg\u00e4nzungen: Operator Bezeichnung . String Konkatenation ?? Null-Coalesing Operator ?: Elvis Operator <=> Spaceship Operator === Vergleichsoperator: Wert und Datentyp","title":"Operatoren"},{"location":"php/01/#string-konkatenation","text":"<?php $str = \"abc\" ; $res = $str . \"-\" . \"def\" ; echo $res ; // abc-def","title":"String Konkatenation"},{"location":"php/01/#null-coalesing-operator","text":"Zuweisung eines Default-Wertes f\u00fcr eine Variable. Der erste Wert der existiert und nicht NULL ist. Im Beispiel ist $z nicht definiert, $a hat den Wert NULL und $b den Wert 10 . Die Null-Coalesing Kette wird solange durchgef\u00fchrt bis ein g\u00fcltiger Wert gefunden wird. <?php $a = NULL ; $b = 10 ; $c = $z ?? $a ?? $b ; echo $c ; // 10","title":"Null-Coalesing Operator"},{"location":"php/01/#elvis-operator","text":"Der Elvis Operator ist eine Vereinfachung des bekannten tern\u00e4ren Operators: linker Ausdruck ?: rechter Ausdruck . Die Logik ist dabei so gestaltet, dass wenn der linke Ausdruck als wahr interpretiert wird, dieser zur\u00fcckgegeben wird ansonsten der rechte Ausdruck (als Alternative). <?php $a = 5 ?: 10 ; $b = 0 ?: 10 ; echo $a ; // 5 echo $b ; // 10","title":"Elvis Operator"},{"location":"php/01/#spaceship-operator","text":"Der Spaceship Operator ist ein spezieller Operator um Ausdr\u00fccke zu vergleichen. Dieser gibt die Werte -1 , 0 oder 1 zur\u00fcck, jenachdem ob der erste Ausdruck kleiner, gleich oder gr\u00f6\u00dfer als der zweite Audruck ist. Der Spaceship Operator kann auch f\u00fcr Strings verwendet werden: <?php echo 1 <=> 1 ; // 0 echo 1 <=> 0 ; // 1 echo 0 <=> 1 ; // -1 echo \"a\" <=> \"a\" ; // 0 echo \"z\" <=> \"a\" ; // 1 echo \"a\" <=> \"z\" ; // -1","title":"Spaceship Operator"},{"location":"php/01/#vergleichsoperator","text":"Generell sind 2 Vergleichsoperatoren zu unterscheiden == und === . Erster untersucht nur ob zwei Werte identisch sind, so w\u00e4re \"5\" == 5 wahr. Der zweite Vergleichoperator untersucht jedoch auch, ob die 2 Operanden den selben Datentyp haben, somit w\u00e4re \"5\" === 5 falsch.","title":"Vergleichsoperator"},{"location":"php/01/#bedingte-ausdrucke","text":"<?php $var = 10 if ( $var == 5 ) { echo \"Der Wert ist 5\" ; } elif ( $var < 5 ) { echo \"Der Wert ist kleiner als 5\" ; } else { echo \"Der Wert ist gr\u00f6\u00dfer als 5\" ; } PHP verf\u00fcgt auch \u00fcber einen switch -Ausdruck, dieser kann in der PHP-Dokumentation nachgelesen werden.","title":"Bedingte Ausdr\u00fccke"},{"location":"php/02/","text":"Arbeiten mit Arrays PHP bietet Index-basierte, assoziative bzw. mehrdimensionale Arrays. Das Arbeiten mit Arrays gestaltet sich grunds\u00e4tzlich einfach. Im folgenden sollen die wichtigsten Aspekte zum Arbeiten mit Arrays in PHP eingef\u00fchrt werden. Erzeugung eines leeren Arrays <?php $mein_array = []; Erzeugung von Arrays mit Inhalten Wird kein Schl\u00fcssel angegeben werden Inhalte indexiert. Auch mehrdimensionale Inhalte k\u00f6nnen hinzugef\u00fcgt werden: <?php $index_array = [ 'index 0' , 123 , [ 'mehr' , 'dimensional' ] ]; Assoziative Arrays werden \u00fcber Schl\u00fcssel/Wert Paare erzeugt: <?php $assoziatives_array = [ 'ein_schl\u00fcssel' => 123 , 'anderer_key' => 456 ]; Es k\u00f6nnen ohne weiters Index-basierte und assoziative Arrays gemischt werden: <?php $array = [ 'ein_schl\u00fcssel' => 123 , 123 , 'anderer wert' ]; Zugriff auf Array-Elemente <?php $array = [ 'ein_schl\u00fcssel' => 123 , 456 , 'anderer wert' ]; echo $array [ 0 ] . \" \\n \" ; echo $array [ 1 ] . \" \\n \" ; echo $array [ 'ein_schl\u00fcssel' ] . \" \\n \" ; echo count ( $array ); Bei einer Mischung von Index-basierten und assoziativen Elementen, z\u00e4hlen die assoziativen Elemente nicht zu den Indizes jedoch zur L\u00e4nge des Arrays. Dies muss f\u00fcr For-Schleifen beachtet werden. Die Ausgabe des Skripts sieht wie folgt aus: 456 anderer wert 123 3 Arrays ver\u00e4ndern Neue Elemente k\u00f6nnen mittels einer leicht abgewandelten Zuweisungsoperation am Ende hinzugef\u00fcgt werden. Dazu muss die Variable mit dem Suffix [] ausgestattet werden. <?php $array = []; $array [] = 'index 0' ; $array [] = 'n\u00e4chster Eintrag' ; Ebenfalls kann eine Array-Position mittels Index bzw. Schl\u00fcssel angesprochen werden. Falls ein Index oder Schl\u00fcssel noch nicht besteht wird dieser neu hinzugef\u00fcgt ansonsten abge\u00e4ndert: <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ; Iteration durch Arrays F\u00fcr die Iteration k\u00f6nnen Schleifen verwendet werden. Dazu k\u00f6nnen bekannte For-Schleifen, While-Schleifen oder Do-While-Schleifen verwendet werden. Neben diesen Varianten gibt es f\u00fcr PHP auch eine eigene Foreach-Schleife. <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ; foreach ( $array as $value ) { echo $value . \" \\n \" ; } foreach ( $array as $key => $value ) { echo $key . \": \" . $value . \" \\n \" ; } Die Foreach-Schleife iteriert durch jedes Element aus dem Array (Index-basierte sowohl assoziative). Durch das syntaktische Konstrukt $key => $value kann zu jedem Element auch der Index bzw. Schl\u00fcssel abgefragt werden. Siehe dazu die Schleifenbeispiele oben. Die Ausgabe zum Skript sieht folgenderma\u00dfen aus: index 0 n \u00e4 chster Eintrag 0 : index 0 next key : n \u00e4 chster Eintrag","title":"Arrays"},{"location":"php/02/#arbeiten-mit-arrays","text":"PHP bietet Index-basierte, assoziative bzw. mehrdimensionale Arrays. Das Arbeiten mit Arrays gestaltet sich grunds\u00e4tzlich einfach. Im folgenden sollen die wichtigsten Aspekte zum Arbeiten mit Arrays in PHP eingef\u00fchrt werden.","title":"Arbeiten mit Arrays"},{"location":"php/02/#erzeugung-eines-leeren-arrays","text":"<?php $mein_array = [];","title":"Erzeugung eines leeren Arrays"},{"location":"php/02/#erzeugung-von-arrays-mit-inhalten","text":"Wird kein Schl\u00fcssel angegeben werden Inhalte indexiert. Auch mehrdimensionale Inhalte k\u00f6nnen hinzugef\u00fcgt werden: <?php $index_array = [ 'index 0' , 123 , [ 'mehr' , 'dimensional' ] ]; Assoziative Arrays werden \u00fcber Schl\u00fcssel/Wert Paare erzeugt: <?php $assoziatives_array = [ 'ein_schl\u00fcssel' => 123 , 'anderer_key' => 456 ]; Es k\u00f6nnen ohne weiters Index-basierte und assoziative Arrays gemischt werden: <?php $array = [ 'ein_schl\u00fcssel' => 123 , 123 , 'anderer wert' ];","title":"Erzeugung von Arrays mit Inhalten"},{"location":"php/02/#zugriff-auf-array-elemente","text":"<?php $array = [ 'ein_schl\u00fcssel' => 123 , 456 , 'anderer wert' ]; echo $array [ 0 ] . \" \\n \" ; echo $array [ 1 ] . \" \\n \" ; echo $array [ 'ein_schl\u00fcssel' ] . \" \\n \" ; echo count ( $array ); Bei einer Mischung von Index-basierten und assoziativen Elementen, z\u00e4hlen die assoziativen Elemente nicht zu den Indizes jedoch zur L\u00e4nge des Arrays. Dies muss f\u00fcr For-Schleifen beachtet werden. Die Ausgabe des Skripts sieht wie folgt aus: 456 anderer wert 123 3","title":"Zugriff auf Array-Elemente"},{"location":"php/02/#arrays-verandern","text":"Neue Elemente k\u00f6nnen mittels einer leicht abgewandelten Zuweisungsoperation am Ende hinzugef\u00fcgt werden. Dazu muss die Variable mit dem Suffix [] ausgestattet werden. <?php $array = []; $array [] = 'index 0' ; $array [] = 'n\u00e4chster Eintrag' ; Ebenfalls kann eine Array-Position mittels Index bzw. Schl\u00fcssel angesprochen werden. Falls ein Index oder Schl\u00fcssel noch nicht besteht wird dieser neu hinzugef\u00fcgt ansonsten abge\u00e4ndert: <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ;","title":"Arrays ver\u00e4ndern"},{"location":"php/02/#iteration-durch-arrays","text":"F\u00fcr die Iteration k\u00f6nnen Schleifen verwendet werden. Dazu k\u00f6nnen bekannte For-Schleifen, While-Schleifen oder Do-While-Schleifen verwendet werden. Neben diesen Varianten gibt es f\u00fcr PHP auch eine eigene Foreach-Schleife. <?php $array = []; $array [ 0 ] = 'index 0' ; $array [ 'next key' ] = 'n\u00e4chster Eintrag' ; foreach ( $array as $value ) { echo $value . \" \\n \" ; } foreach ( $array as $key => $value ) { echo $key . \": \" . $value . \" \\n \" ; } Die Foreach-Schleife iteriert durch jedes Element aus dem Array (Index-basierte sowohl assoziative). Durch das syntaktische Konstrukt $key => $value kann zu jedem Element auch der Index bzw. Schl\u00fcssel abgefragt werden. Siehe dazu die Schleifenbeispiele oben. Die Ausgabe zum Skript sieht folgenderma\u00dfen aus: index 0 n \u00e4 chster Eintrag 0 : index 0 next key : n \u00e4 chster Eintrag","title":"Iteration durch Arrays"},{"location":"php/03/","text":"Superglobals PHP definiert einige globale Variablen (bezeichnet als Superglobals), welche wichtige Informationen zum HTTP-Request und zur Server Umgebung enthalten. Superglobals sind als assoziative Arrays angelegt. Folgende Superglobals sind definiert: $_SERVER : wichtige Informationen zum aktuellen HTTP-Request und Serverkontext $_GET : Schl\u00fcssel/Wert Paare, welche URL Parameter enthalten $_POST : Schl\u00fcssel/Wert Paare, welche Daten aus dem HTTP-Body enthalten $_FILES : Falls Dateien an den Server gesendet werden, sind die tempor\u00e4ren Pfade und Statusinformationen dar\u00fcber dort enthalten $_COOKIE : Schl\u00fcssel/Wert Paare \u00fcber Cookies, welche im HTTP-Request \u00fcbertragen wurden $_SESSION : Schl\u00fcssel/Wert Paare zur aktuellen Session, welche am Server gespeichert ist (Referenziert \u00fcber Session-Cookie) $_REQUEST : Zusammenfassung von $_GET , $_POST , $_COOKIE $_ENV : Umgebungsvariablen am Server Beispiel: $_GET Die Superglobal $_GET enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche als URL-Parameter (Querystring) an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber den URL-Parameter name gesetzt. Wird kein URL-Parameter name angegeben, so erh\u00e4lt die Variable $name den Wert \"Welt\" (Null-Coalesing Operator). <?php $name = $_GET [ 'name' ] ?? \"Welt\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> Hallo <?php echo $name ; ?> ! </p> </body> </html> Wird das Skript \u00fcber die URL http://localhost:9000 aufgerufen, sieht die Ausgabe \u00e4hnlich zum Screenshot unten aus: Falls das Skript \u00fcber die URL http://localhost:9000?name=Franzi aufgerufen wird, wird die Variable $name mit dem Wert \"Franzi\" belegt und die Ausgabe resultiert in Hallo Franzi . Dies entspricht dem unten angef\u00fchrten Screenshot: Beispiel: $_POST Die Superglobal $_POST enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche im HTTP-Body an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber ein Formularfeld gesetzt dieses hat das Attribute name mit dem Attributwert firstname gesetzt. Dadurch enth\u00e4lt der HTTP-Body beim Absenden des Formulars den Schl\u00fcssel firstname mit entsprechendem Wert (aus dem Formularfeld). <?php $name = $_POST [ 'firstname' ] ?? \"\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> <?php echo $name ? \"Hallo $name !\" : \"Wen willst du gr\u00fc\u00dfen?\" ; ?> </p> <form method=\"post\"> <input name=\"firstname\" value=\" <?php echo $name ; ?> \"> <button type=\"submit\">Absenden</button> </form> </body> </html> Im Screenshot wird das Skript \u00fcber den lokalen Web-Server aufgerufen mit der URL http://localhost:8080 . Bei Absenden des Formulars mit dem Wert Studenten wird das Schl\u00fcssel/Wert Paar firstname=Studenten als POST (HTTP-Request mit Methode POST) an den Web-Server gesendet. Die Verarbeitung am Web-Server f\u00fchrt dazu, dass die Variable $name mit dem Wert Studenten belegt wird und an unterschiedlichen Stellen zur entsprechenden Ausgabe f\u00fchrt:","title":"Superglobals"},{"location":"php/03/#superglobals","text":"PHP definiert einige globale Variablen (bezeichnet als Superglobals), welche wichtige Informationen zum HTTP-Request und zur Server Umgebung enthalten. Superglobals sind als assoziative Arrays angelegt. Folgende Superglobals sind definiert: $_SERVER : wichtige Informationen zum aktuellen HTTP-Request und Serverkontext $_GET : Schl\u00fcssel/Wert Paare, welche URL Parameter enthalten $_POST : Schl\u00fcssel/Wert Paare, welche Daten aus dem HTTP-Body enthalten $_FILES : Falls Dateien an den Server gesendet werden, sind die tempor\u00e4ren Pfade und Statusinformationen dar\u00fcber dort enthalten $_COOKIE : Schl\u00fcssel/Wert Paare \u00fcber Cookies, welche im HTTP-Request \u00fcbertragen wurden $_SESSION : Schl\u00fcssel/Wert Paare zur aktuellen Session, welche am Server gespeichert ist (Referenziert \u00fcber Session-Cookie) $_REQUEST : Zusammenfassung von $_GET , $_POST , $_COOKIE $_ENV : Umgebungsvariablen am Server","title":"Superglobals"},{"location":"php/03/#beispiel-_get","text":"Die Superglobal $_GET enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche als URL-Parameter (Querystring) an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber den URL-Parameter name gesetzt. Wird kein URL-Parameter name angegeben, so erh\u00e4lt die Variable $name den Wert \"Welt\" (Null-Coalesing Operator). <?php $name = $_GET [ 'name' ] ?? \"Welt\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> Hallo <?php echo $name ; ?> ! </p> </body> </html> Wird das Skript \u00fcber die URL http://localhost:9000 aufgerufen, sieht die Ausgabe \u00e4hnlich zum Screenshot unten aus: Falls das Skript \u00fcber die URL http://localhost:9000?name=Franzi aufgerufen wird, wird die Variable $name mit dem Wert \"Franzi\" belegt und die Ausgabe resultiert in Hallo Franzi . Dies entspricht dem unten angef\u00fchrten Screenshot:","title":"Beispiel: $_GET"},{"location":"php/03/#beispiel-_post","text":"Die Superglobal $_POST enth\u00e4lt alle Schl\u00fcssel/Wert Paare, welche im HTTP-Body an das PHP-Skript \u00fcbergeben wurden. Die Variable $name im Skript wird \u00fcber ein Formularfeld gesetzt dieses hat das Attribute name mit dem Attributwert firstname gesetzt. Dadurch enth\u00e4lt der HTTP-Body beim Absenden des Formulars den Schl\u00fcssel firstname mit entsprechendem Wert (aus dem Formularfeld). <?php $name = $_POST [ 'firstname' ] ?? \"\" ; ?> <!DOCTYPE html> <html> <head> <title>Hallo <?php echo $name ; ?> </title> </head> <body> <p> <?php echo $name ? \"Hallo $name !\" : \"Wen willst du gr\u00fc\u00dfen?\" ; ?> </p> <form method=\"post\"> <input name=\"firstname\" value=\" <?php echo $name ; ?> \"> <button type=\"submit\">Absenden</button> </form> </body> </html> Im Screenshot wird das Skript \u00fcber den lokalen Web-Server aufgerufen mit der URL http://localhost:8080 . Bei Absenden des Formulars mit dem Wert Studenten wird das Schl\u00fcssel/Wert Paar firstname=Studenten als POST (HTTP-Request mit Methode POST) an den Web-Server gesendet. Die Verarbeitung am Web-Server f\u00fchrt dazu, dass die Variable $name mit dem Wert Studenten belegt wird und an unterschiedlichen Stellen zur entsprechenden Ausgabe f\u00fchrt:","title":"Beispiel: $_POST"},{"location":"php/04/","text":"Funktionen PHP hat \u00fcber 1000 build-in Funktionen, es k\u00f6nnen auch eigene Funktionen definiert werden. Eine Funktion ist ein Block aus Befehlen, welcher \u00fcber einen Funktionsaufruf ausgef\u00fchrt werden kann. Definition und Nutzung Im unten angef\u00fchrten Beispiel wird eine Funktion add definiert. Diese Funktion kann 2 Parameter erhalten, wobei der zweite Parameter $b einen Defaultwert besitzt. Die Funktion kann also ohne Angabe des zweiten Parameters genutzt werden. Funktionen k\u00f6nnen \u00fcber das Schl\u00fcsselwort return ein Ergebnis zur\u00fcckgeben. <?php function add ( $a , $b = 0 ) { return $a + $b ; } echo add ( 3 , 5 ); // 8 echo add ( 3 ); // 3 echo add ( 3 , add ( 4 , 5 )); // 12 Typdeklaration Es kann f\u00fcr Funktionsparameter und R\u00fcckgabeparameter eine Typdeklaration durchgef\u00fchrt werden. Die PHP-Laufzeitumgebung versucht die entsprechenden Parameter in den gew\u00fcnschten Typ zu \u00fcberf\u00fchren. <?php function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // 7 \u00dcber die Konstante strict_types kann festgelegt werden, dass PHP eine strenge Typisierung durchsetzt. Falls ein Parameter mit falschem Datentyp an eine Funktion \u00fcbergeben wird, wird ein TypeError geworfen. <?php declare ( strict_types = 1 ); function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // ERROR: TypeError","title":"Funktionen"},{"location":"php/04/#funktionen","text":"PHP hat \u00fcber 1000 build-in Funktionen, es k\u00f6nnen auch eigene Funktionen definiert werden. Eine Funktion ist ein Block aus Befehlen, welcher \u00fcber einen Funktionsaufruf ausgef\u00fchrt werden kann.","title":"Funktionen"},{"location":"php/04/#definition-und-nutzung","text":"Im unten angef\u00fchrten Beispiel wird eine Funktion add definiert. Diese Funktion kann 2 Parameter erhalten, wobei der zweite Parameter $b einen Defaultwert besitzt. Die Funktion kann also ohne Angabe des zweiten Parameters genutzt werden. Funktionen k\u00f6nnen \u00fcber das Schl\u00fcsselwort return ein Ergebnis zur\u00fcckgeben. <?php function add ( $a , $b = 0 ) { return $a + $b ; } echo add ( 3 , 5 ); // 8 echo add ( 3 ); // 3 echo add ( 3 , add ( 4 , 5 )); // 12","title":"Definition und Nutzung"},{"location":"php/04/#typdeklaration","text":"Es kann f\u00fcr Funktionsparameter und R\u00fcckgabeparameter eine Typdeklaration durchgef\u00fchrt werden. Die PHP-Laufzeitumgebung versucht die entsprechenden Parameter in den gew\u00fcnschten Typ zu \u00fcberf\u00fchren. <?php function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // 7 \u00dcber die Konstante strict_types kann festgelegt werden, dass PHP eine strenge Typisierung durchsetzt. Falls ein Parameter mit falschem Datentyp an eine Funktion \u00fcbergeben wird, wird ein TypeError geworfen. <?php declare ( strict_types = 1 ); function add ( int $a , int $b = 0 ) : int { return $a + $b ; } echo add ( 2.555 , \"5\" ); // ERROR: TypeError","title":"Typdeklaration"},{"location":"php/05/","text":"Objektorientierte Programmierung PHP ist eine objektorientierte Programmiersprache und besitzt alle g\u00e4ngigen Konzepte einer objektorientierten Programmiersprache. Alle g\u00e4ngigen Konzepte wie Klassenvererbung , Member Sichtbarkeit , Interfaces , statische Member , anonyme Klassen , abstrakte Klassen sind auch in PHP vorhanden. Klassen Klassen werden \u00fcber das Schl\u00fcsselwort class definiert. Es gibt spezielle Methoden wie den Konstruktur ( __construct ), welche mit doppeltem Unterstrich beginnen. Alle Member sind generell public au\u00dfer es wird explizit anders angegeben wie zB f\u00fcr den Member $color . Mit dem Schl\u00fcsselwort new k\u00f6nnen Klasseninstanzen erzeugt werden. \u00dcber die Variable $this kann auf die Instanz zugegriffen werden. Zugriff auf Member der Instanz wird \u00fcber -> durchgef\u00fchrt. So wird zum Beispiel die Methode drive auf der Instanz $veh \u00fcber $veh->drive() ausgef\u00fchrt. <?php class Vehicle { protected $color ; function __construct ( string $color ) { $this -> color = $color ; } function drive () { echo $this -> color . \" vehicle is driving!\" ; } } $veh = new Vehicle ( \"red\" ); $veh -> drive (); // red vehicle is driving! Vererbung \u00dcber das Schl\u00fcsselwort extends wird die Klassenvererbung durchgef\u00fchrt. PHP unterst\u00fctzt keine Mehrfachvererbung. <?php class Car extends Vehicle { function drive () { echo $this -> color . \" CAR is driving!\" ; } } $car = new Car ( \"blue\" ); $car -> drive (); // blue CAR is driving! Statische Member Mit dem Schl\u00fcsselwort static k\u00f6nnen statische Member einer Klasse definiert werden. Zugriff auf statische Member wird \u00fcber den :: Operator durchgef\u00fchrt (Scope Resolution Operator). Innerhalb der Klasse kann mit dem Schl\u00fcsselwort self auf statische Member zugegriffen werden. <?php class Car { protected static $wheel_count = 4 ; public static function checkWheels ( $wheel_count ) { return $wheel_count == self :: $wheel_count ; } } echo Car :: checkWheels ( 5 ) ? \"richtige Reifenanzahl\" : \"falsche Reifenanzahl\" ; // Ausgabe: falsche Reifenanzahl","title":"OOP"},{"location":"php/05/#objektorientierte-programmierung","text":"PHP ist eine objektorientierte Programmiersprache und besitzt alle g\u00e4ngigen Konzepte einer objektorientierten Programmiersprache. Alle g\u00e4ngigen Konzepte wie Klassenvererbung , Member Sichtbarkeit , Interfaces , statische Member , anonyme Klassen , abstrakte Klassen sind auch in PHP vorhanden.","title":"Objektorientierte Programmierung"},{"location":"php/05/#klassen","text":"Klassen werden \u00fcber das Schl\u00fcsselwort class definiert. Es gibt spezielle Methoden wie den Konstruktur ( __construct ), welche mit doppeltem Unterstrich beginnen. Alle Member sind generell public au\u00dfer es wird explizit anders angegeben wie zB f\u00fcr den Member $color . Mit dem Schl\u00fcsselwort new k\u00f6nnen Klasseninstanzen erzeugt werden. \u00dcber die Variable $this kann auf die Instanz zugegriffen werden. Zugriff auf Member der Instanz wird \u00fcber -> durchgef\u00fchrt. So wird zum Beispiel die Methode drive auf der Instanz $veh \u00fcber $veh->drive() ausgef\u00fchrt. <?php class Vehicle { protected $color ; function __construct ( string $color ) { $this -> color = $color ; } function drive () { echo $this -> color . \" vehicle is driving!\" ; } } $veh = new Vehicle ( \"red\" ); $veh -> drive (); // red vehicle is driving!","title":"Klassen"},{"location":"php/05/#vererbung","text":"\u00dcber das Schl\u00fcsselwort extends wird die Klassenvererbung durchgef\u00fchrt. PHP unterst\u00fctzt keine Mehrfachvererbung. <?php class Car extends Vehicle { function drive () { echo $this -> color . \" CAR is driving!\" ; } } $car = new Car ( \"blue\" ); $car -> drive (); // blue CAR is driving!","title":"Vererbung"},{"location":"php/05/#statische-member","text":"Mit dem Schl\u00fcsselwort static k\u00f6nnen statische Member einer Klasse definiert werden. Zugriff auf statische Member wird \u00fcber den :: Operator durchgef\u00fchrt (Scope Resolution Operator). Innerhalb der Klasse kann mit dem Schl\u00fcsselwort self auf statische Member zugegriffen werden. <?php class Car { protected static $wheel_count = 4 ; public static function checkWheels ( $wheel_count ) { return $wheel_count == self :: $wheel_count ; } } echo Car :: checkWheels ( 5 ) ? \"richtige Reifenanzahl\" : \"falsche Reifenanzahl\" ; // Ausgabe: falsche Reifenanzahl","title":"Statische Member"},{"location":"tutorials/01/","text":"PHP Installation In diesem Tutorial wird die Installation von PHP f\u00fcr das Windows Betriebssystem beschrieben. Download Auf der PHP-Website ( php.net ) findet sich der Men\u00fcpunkt Downloads . Im oberen Bereich der Downloadseite befindet sich der Abschnitt Current Stable PHP . \u00dcber den Link Windows downloads erreicht man die PHP-Binaries f\u00fcr Windows. Je nach Prozessor gibt es eine x86 bzw. x64 Version (Normalerweise sollte dies x64 sein). Des weiteren kann zwischen einer Non Thread Safe bzw. einer Thread Safe Variante gew\u00e4hlt werden. Die Thread Safe Variante w\u00e4re zu w\u00e4hlen, wenn man PHP als Apache Modul nutzt. Falls PHP \u00fcber die Kommandozeile oder als CGI-Modul genutzt wird sollte die Non Thread Safe Variante gew\u00e4hlt werden. Info Das Zip Packet der x64 Non Thread Safe PHP-Binary Variante soll zum Download gew\u00e4hlt werden. Konfiguration Das Zip-Archiv soll in den Ordner C:\\php entpackt werden. Die Datei C:\\php\\php.exe soll demnach verf\u00fcgbar sein. Damit PHP \u00fcber die Kommandozeile ausgef\u00fchrt werden kann, muss der Ordner C:\\php zur Umgebungsvariable Path hinzugef\u00fcgt werden. Suchen Sie dazu im Windows Startmen\u00fc nach Erweiterten Systemeinstellungen (Shortcut: Windows-Taste + Pause). Mit dem Button Umgebungsvariablen... \u00f6ffnen Sie das Men\u00fc zur Verwaltung der Umgebungsvariablen. Im oberen Abschnitt der Umgebungsvariablen finden sich die Benutzervariablen (unten finden sich die Systemvariablen). In den Benutzervariablen sollte eine Variable Path existieren. Falls diese nicht existiert, sollte diese \u00fcber Neu... erstellt werden. Info F\u00fcgen Sie einen neuen Eintrag zur Umgebungsvariable Path mit dem Wert C:\\php hinzu. Test 1 \u00d6ffnen Sie die Powershell \u00fcber das Windows Startmen\u00fc . Setzen Sie den Befehl php --version in der Kommandozeile ab. Die Ausgabe sollte demnach ein \u00e4hnliches Bild liefern: > php --version PHP 7 . 4 . 2 ( cli ) ( built : Jan 21 2020 17 : 52 : 24 ) ( NTS Visual C ++ 2017 x64 ) Copyright ( c ) The PHP Group Zend Engine v3 . 4 . 0 , Copyright ( c ) Zend Technologies Test 2 Erstellen Sie innerhalb eines beliebigen von Ihnen gew\u00e4hlten Ordner eine Datei hello.php . F\u00fcgen Sie folgenden Quellcode in die Datei ein: <?php echo \"Hello PHP!\" ; Navigieren Sie \u00fcber die Kommandozeile in diesen Ordner ( cd ). F\u00fchren Sie das Skript mit dem Befehl php hello.php aus. Die Ausgabe auf der Kommandozeile sollte ein \u00e4hnliches Bild liefern: > php hello . php Hello PHP ! H\u00e4ufige Probleme Die Kommandozeile (zB Powershell) muss nachdem Umgebungsvariablen ver\u00e4ndert wurden neu geschlossen und neu gestartet werden. Die Datei php.exe muss im Pfad C:\\php\\php.exe liegen.","title":"PHP Installation"},{"location":"tutorials/01/#php-installation","text":"In diesem Tutorial wird die Installation von PHP f\u00fcr das Windows Betriebssystem beschrieben.","title":"PHP Installation"},{"location":"tutorials/01/#download","text":"Auf der PHP-Website ( php.net ) findet sich der Men\u00fcpunkt Downloads . Im oberen Bereich der Downloadseite befindet sich der Abschnitt Current Stable PHP . \u00dcber den Link Windows downloads erreicht man die PHP-Binaries f\u00fcr Windows. Je nach Prozessor gibt es eine x86 bzw. x64 Version (Normalerweise sollte dies x64 sein). Des weiteren kann zwischen einer Non Thread Safe bzw. einer Thread Safe Variante gew\u00e4hlt werden. Die Thread Safe Variante w\u00e4re zu w\u00e4hlen, wenn man PHP als Apache Modul nutzt. Falls PHP \u00fcber die Kommandozeile oder als CGI-Modul genutzt wird sollte die Non Thread Safe Variante gew\u00e4hlt werden. Info Das Zip Packet der x64 Non Thread Safe PHP-Binary Variante soll zum Download gew\u00e4hlt werden.","title":"Download"},{"location":"tutorials/01/#konfiguration","text":"Das Zip-Archiv soll in den Ordner C:\\php entpackt werden. Die Datei C:\\php\\php.exe soll demnach verf\u00fcgbar sein. Damit PHP \u00fcber die Kommandozeile ausgef\u00fchrt werden kann, muss der Ordner C:\\php zur Umgebungsvariable Path hinzugef\u00fcgt werden. Suchen Sie dazu im Windows Startmen\u00fc nach Erweiterten Systemeinstellungen (Shortcut: Windows-Taste + Pause). Mit dem Button Umgebungsvariablen... \u00f6ffnen Sie das Men\u00fc zur Verwaltung der Umgebungsvariablen. Im oberen Abschnitt der Umgebungsvariablen finden sich die Benutzervariablen (unten finden sich die Systemvariablen). In den Benutzervariablen sollte eine Variable Path existieren. Falls diese nicht existiert, sollte diese \u00fcber Neu... erstellt werden. Info F\u00fcgen Sie einen neuen Eintrag zur Umgebungsvariable Path mit dem Wert C:\\php hinzu.","title":"Konfiguration"},{"location":"tutorials/01/#test-1","text":"\u00d6ffnen Sie die Powershell \u00fcber das Windows Startmen\u00fc . Setzen Sie den Befehl php --version in der Kommandozeile ab. Die Ausgabe sollte demnach ein \u00e4hnliches Bild liefern: > php --version PHP 7 . 4 . 2 ( cli ) ( built : Jan 21 2020 17 : 52 : 24 ) ( NTS Visual C ++ 2017 x64 ) Copyright ( c ) The PHP Group Zend Engine v3 . 4 . 0 , Copyright ( c ) Zend Technologies","title":"Test 1"},{"location":"tutorials/01/#test-2","text":"Erstellen Sie innerhalb eines beliebigen von Ihnen gew\u00e4hlten Ordner eine Datei hello.php . F\u00fcgen Sie folgenden Quellcode in die Datei ein: <?php echo \"Hello PHP!\" ; Navigieren Sie \u00fcber die Kommandozeile in diesen Ordner ( cd ). F\u00fchren Sie das Skript mit dem Befehl php hello.php aus. Die Ausgabe auf der Kommandozeile sollte ein \u00e4hnliches Bild liefern: > php hello . php Hello PHP !","title":"Test 2"},{"location":"tutorials/01/#haufige-probleme","text":"Die Kommandozeile (zB Powershell) muss nachdem Umgebungsvariablen ver\u00e4ndert wurden neu geschlossen und neu gestartet werden. Die Datei php.exe muss im Pfad C:\\php\\php.exe liegen.","title":"H\u00e4ufige Probleme"},{"location":"tutorials/02/","text":"PHP Webserver PHP liefert einen Webserver in der Standardinstallation mit. Dieser Webserver ist rein zu Entwicklungs- und Testzwecken und sollte nicht in Produktivumgebungen genutzt werden. Die grunds\u00e4tzlichen Nutzungsm\u00f6glichkeiten dieses Web-Servers ist Inhalt dieses Tutorials. Einfache Nutzung Mit der Option -S <Adresse>:<Port> kann der Webserver gestartet werden. Als <Addresse> kann dabei eine IP-Adresse oder einfach localhost angegeben werden. Als <Port> muss ein freier Port am Rechner angegeben werden (zB 8080 ). Der Webserver kann innerhalb eines Ordners in der Kommandzeile gestartet werden. Der Ordner in dem der Webserver gestartet wird, fungiert dadurch als Webroot: > php - S localhost : 8080 Nachdem Start des Webserver sind alle Dateien und Ordner, welche sich im Webroot befinden \u00fcber den Webbrowser abrufbar. Alle Dateien mit Suffix .php werden entsprechend vom PHP-Interpreter verarbeitet. Anderer Webroot Mit der Option -t <Webroot> kann ein anderer Webroot gesetzt werden. Im folgenden Beispiel w\u00fcrde der Webroot C:\\mein_webroot gesetzt: > php - S localhost : 9000 - t C : \\ main_webroot Logging Zum Debugging kann es n\u00fctzlich sein, Log-Ausgaben auf der Kommandozeile zu \u00fcberwachen. Mit der PHP-Funktion error_log($message, $message_type=0) k\u00f6nnen Log-Ausgaben auf der Kommandozeile gemacht werden. Wichtig dabei ist, dass $message_type den Wert 4 bekommt, sonst gehen die Log-Ausgaben nicht auf die Kommandozeile. <?php error_log ( \"Meine Log-Ausgabe...\" , 4 ); Test Erstellen Sie eine Datei test.php innerhalb eines beliebigen Ordners. F\u00fcllen Sie die Datei mit folgendem Inhalt: <?php echo \"hello\" ; error_log ( \"Log Ausgabe ...\" , 4 ); Starten Sie den Webserver \u00fcber die entsprechenden Optionen auf der Kommandozeile. \u00d6ffnen Sie im Webbrowser die entsprechende URI (zB http://localhost:8080/test.php ), die Ausgabe auf der Kommandozeile sollte demnach ein \u00e4hnliches Bild liefern: > php - S localhost : 8080 [ Wed Feb 12 09 : 50 : 28 2020 ] PHP 7 . 4 . 2 Development Server ( http : // localhost : 8080 ) started [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Accepted [ Wed Feb 12 09 : 50 : 31 2020 ] Log Ausgabe ... [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 [ 200 ]: GET / test . php [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Closing H\u00e4ufige Probleme Es kann durchaus sein, dass der gew\u00fcnschte Port belegt ist. Sollte bei der Ansicht im Webbrowser irgendetwas unklares erscheinen andere Ports versuchen (zB 8081 , 9000 , etc).","title":"PHP Webserver"},{"location":"tutorials/02/#php-webserver","text":"PHP liefert einen Webserver in der Standardinstallation mit. Dieser Webserver ist rein zu Entwicklungs- und Testzwecken und sollte nicht in Produktivumgebungen genutzt werden. Die grunds\u00e4tzlichen Nutzungsm\u00f6glichkeiten dieses Web-Servers ist Inhalt dieses Tutorials.","title":"PHP Webserver"},{"location":"tutorials/02/#einfache-nutzung","text":"Mit der Option -S <Adresse>:<Port> kann der Webserver gestartet werden. Als <Addresse> kann dabei eine IP-Adresse oder einfach localhost angegeben werden. Als <Port> muss ein freier Port am Rechner angegeben werden (zB 8080 ). Der Webserver kann innerhalb eines Ordners in der Kommandzeile gestartet werden. Der Ordner in dem der Webserver gestartet wird, fungiert dadurch als Webroot: > php - S localhost : 8080 Nachdem Start des Webserver sind alle Dateien und Ordner, welche sich im Webroot befinden \u00fcber den Webbrowser abrufbar. Alle Dateien mit Suffix .php werden entsprechend vom PHP-Interpreter verarbeitet.","title":"Einfache Nutzung"},{"location":"tutorials/02/#anderer-webroot","text":"Mit der Option -t <Webroot> kann ein anderer Webroot gesetzt werden. Im folgenden Beispiel w\u00fcrde der Webroot C:\\mein_webroot gesetzt: > php - S localhost : 9000 - t C : \\ main_webroot","title":"Anderer Webroot"},{"location":"tutorials/02/#logging","text":"Zum Debugging kann es n\u00fctzlich sein, Log-Ausgaben auf der Kommandozeile zu \u00fcberwachen. Mit der PHP-Funktion error_log($message, $message_type=0) k\u00f6nnen Log-Ausgaben auf der Kommandozeile gemacht werden. Wichtig dabei ist, dass $message_type den Wert 4 bekommt, sonst gehen die Log-Ausgaben nicht auf die Kommandozeile. <?php error_log ( \"Meine Log-Ausgabe...\" , 4 );","title":"Logging"},{"location":"tutorials/02/#test","text":"Erstellen Sie eine Datei test.php innerhalb eines beliebigen Ordners. F\u00fcllen Sie die Datei mit folgendem Inhalt: <?php echo \"hello\" ; error_log ( \"Log Ausgabe ...\" , 4 ); Starten Sie den Webserver \u00fcber die entsprechenden Optionen auf der Kommandozeile. \u00d6ffnen Sie im Webbrowser die entsprechende URI (zB http://localhost:8080/test.php ), die Ausgabe auf der Kommandozeile sollte demnach ein \u00e4hnliches Bild liefern: > php - S localhost : 8080 [ Wed Feb 12 09 : 50 : 28 2020 ] PHP 7 . 4 . 2 Development Server ( http : // localhost : 8080 ) started [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Accepted [ Wed Feb 12 09 : 50 : 31 2020 ] Log Ausgabe ... [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 [ 200 ]: GET / test . php [ Wed Feb 12 09 : 50 : 31 2020 ] [:: 1 ]: 52285 Closing","title":"Test"},{"location":"tutorials/02/#haufige-probleme","text":"Es kann durchaus sein, dass der gew\u00fcnschte Port belegt ist. Sollte bei der Ansicht im Webbrowser irgendetwas unklares erscheinen andere Ports versuchen (zB 8081 , 9000 , etc).","title":"H\u00e4ufige Probleme"},{"location":"tutorials/03/","text":"PHP Konfiguration Die PHP-Laufzeitumgebung wird \u00fcber eine ini-Datei konfiguriert. In diesem Tutorial wird erkl\u00e4rt wie Sie PHP \u00fcber eine ini-Datei konfigurieren und wie eine ini-Datei grunds\u00e4tzlich aufgebaut ist. php.ini PHP nutzt die Konfigurationsdatei mit dem Namen php.ini im Verzeichnis C:\\php als zentrale Konfigurationsdatei. Nach der Installation \u00fcber das Tutorial liegen im Ordner C:\\php 2 ini-Dateien als Vorlagen. php.ini-development als Konfiguration f\u00fcr einen Entwicklungsrechner und php.ini-production f\u00fcr eine produktive Umgebung. F\u00fcr Ihren Entwicklungsrechner soll die Datei php.ini-development in php.ini umbenannt werden. Dadurch wird diese Datei zur aktuellen Konfiguration der PHP-Laufzeitumgebung. Syntax der ini-Datei Die ini-Datei ist in Abschnitte gegliedert. Ein Abschnitt wird mit eckigen Klammern ausgewiesen. Zum Beispiel wird der Abschnitt um Konfigurationen zu PostgreSQL durchzuf\u00fchren als [PostgreSQL] angegeben. Eine ini-Datei kann Kommentare enthalten, diese werden \u00fcber das ; -Symbol angegeben. Eine Konfiguration wird als Schl\u00fcssel/Wert Paar angegeben (zB post_max_size = 8M ). Im folgenden findet sich ein beispielhafter Auszug einer ini-Datei: [PHP] ; Maximum size of POST data that PHP will accept. ; Its value may be 0 to disable the limit. It is ignored if POST data reading ; is disabled through enable_post_data_reading. ; http://php.net/post-max-size post_max_size = 8M [CLI Server] ; Whether the CLI web server uses ANSI color coding in its terminal output. cli_server.color = On Wichtige Konfigurationen Erweiterungen aktivieren Es gibt eine Vielzahl an Erweiterungen, welche mit PHP mitgeliefert werden. Diese Erweiterungen sind anf\u00e4nglich deaktiviert. Um eine spezielle Erweiterung zu aktivieren, muss der Kommentar zum entsprechenden Schl\u00fcssel/Wert Paar entfernt werden. Die Erweiterung zur Nutzung von SQLite ist deaktiviert. Suchen Sie dazu das Schl\u00fcssel/Wert Paar extension=pdo_sqlite : ;extension=pdo_sqlite Falls dieses mit einem Kommentar versehen ist wie im obigen Beispiel, entfernen Sie den Kommentar und die Erweiterung ist aktiviert: extension = pdo_sqlite Browscap aktivieren Browscap bietet die Funktion HTTP-Header von User-Agents auszuwerten. Jeder User-Agent ist \u00fcber einen speziellen \"User-Agent String\" identifiziert. Ein \"User-Agent String\" ist nicht standardisiert, mit Bibliothenk wie Browscap k\u00f6nnen wichtige Informationen aus diesen Strings extrahiert werden. Im folgenden findet sich ein Beispiel eines \"User-Agent Strings\". Dieses Beispiel stammt aus einem Firefox Browser auf einem Windows Desktop Rechner: Mozilla / 5 . 0 ( Windows NT 6 . 1 ; Win64 ; x64 ; rv : 47 . 0 ) Gecko / 20100101 Firefox / 47 . 0 Um in PHP Browscap zu aktivieren, muss (1) die aktuelle Browscap ini-Datei heruntergeladen werden und (2) muss diese \u00fcber die php.ini eingebunden werden. Laden Sie dazu die entsprechende ini-Datei der Browscap Website herunter ( php_browscap.ini ). Legen Sie die Datei in das Verzeichnis C:\\php Referenzieren Sie die ini-Datei \u00fcber eine absolute Pfadangabe in der php.ini . \u00c4ndern Sie dazu die die php.ini an der entsprechenden Stelle folgend ab: [browscap] ; http://php.net/browscap browscap = C:/php/php_browscap.ini Konfigurations\u00fcbersicht Um die Konfiguration einer PHP-Laufzeitumgebung einzusehen und zu pr\u00fcfen, biete PHP die Funktion phpinfo . Erstellen Sie eine Datei index.php innerhalb eines beliebigen Ordners. Der Inhalt der index.php soll folgenden Quellcode enthalten: <?php phpinfo (); Starten Sie einen lokalen Web-Server und \u00f6ffnen Sie die index.php Datei \u00fcber den Web-Browser. Es sollte eine Website erscheinen die dem Screenshot entspricht. Sie finden darauf alle Konfigurationen strukturiert aufgelistet, welche in der php.ini vorgenommen sind. H\u00e4ufige Probleme Falls der Web-Server gestartet ist, w\u00e4hrend eine Konfiguration ge\u00e4ndert wird, muss der Web-Server gestoppt und neu gestartet werden. F\u00fcr CLI-Skripte ist kein Neustart erforderlich.","title":"PHP Konfiguration"},{"location":"tutorials/03/#php-konfiguration","text":"Die PHP-Laufzeitumgebung wird \u00fcber eine ini-Datei konfiguriert. In diesem Tutorial wird erkl\u00e4rt wie Sie PHP \u00fcber eine ini-Datei konfigurieren und wie eine ini-Datei grunds\u00e4tzlich aufgebaut ist.","title":"PHP Konfiguration"},{"location":"tutorials/03/#phpini","text":"PHP nutzt die Konfigurationsdatei mit dem Namen php.ini im Verzeichnis C:\\php als zentrale Konfigurationsdatei. Nach der Installation \u00fcber das Tutorial liegen im Ordner C:\\php 2 ini-Dateien als Vorlagen. php.ini-development als Konfiguration f\u00fcr einen Entwicklungsrechner und php.ini-production f\u00fcr eine produktive Umgebung. F\u00fcr Ihren Entwicklungsrechner soll die Datei php.ini-development in php.ini umbenannt werden. Dadurch wird diese Datei zur aktuellen Konfiguration der PHP-Laufzeitumgebung.","title":"php.ini"},{"location":"tutorials/03/#syntax-der-ini-datei","text":"Die ini-Datei ist in Abschnitte gegliedert. Ein Abschnitt wird mit eckigen Klammern ausgewiesen. Zum Beispiel wird der Abschnitt um Konfigurationen zu PostgreSQL durchzuf\u00fchren als [PostgreSQL] angegeben. Eine ini-Datei kann Kommentare enthalten, diese werden \u00fcber das ; -Symbol angegeben. Eine Konfiguration wird als Schl\u00fcssel/Wert Paar angegeben (zB post_max_size = 8M ). Im folgenden findet sich ein beispielhafter Auszug einer ini-Datei: [PHP] ; Maximum size of POST data that PHP will accept. ; Its value may be 0 to disable the limit. It is ignored if POST data reading ; is disabled through enable_post_data_reading. ; http://php.net/post-max-size post_max_size = 8M [CLI Server] ; Whether the CLI web server uses ANSI color coding in its terminal output. cli_server.color = On","title":"Syntax der ini-Datei"},{"location":"tutorials/03/#wichtige-konfigurationen","text":"","title":"Wichtige Konfigurationen"},{"location":"tutorials/03/#erweiterungen-aktivieren","text":"Es gibt eine Vielzahl an Erweiterungen, welche mit PHP mitgeliefert werden. Diese Erweiterungen sind anf\u00e4nglich deaktiviert. Um eine spezielle Erweiterung zu aktivieren, muss der Kommentar zum entsprechenden Schl\u00fcssel/Wert Paar entfernt werden. Die Erweiterung zur Nutzung von SQLite ist deaktiviert. Suchen Sie dazu das Schl\u00fcssel/Wert Paar extension=pdo_sqlite : ;extension=pdo_sqlite Falls dieses mit einem Kommentar versehen ist wie im obigen Beispiel, entfernen Sie den Kommentar und die Erweiterung ist aktiviert: extension = pdo_sqlite","title":"Erweiterungen aktivieren"},{"location":"tutorials/03/#browscap-aktivieren","text":"Browscap bietet die Funktion HTTP-Header von User-Agents auszuwerten. Jeder User-Agent ist \u00fcber einen speziellen \"User-Agent String\" identifiziert. Ein \"User-Agent String\" ist nicht standardisiert, mit Bibliothenk wie Browscap k\u00f6nnen wichtige Informationen aus diesen Strings extrahiert werden. Im folgenden findet sich ein Beispiel eines \"User-Agent Strings\". Dieses Beispiel stammt aus einem Firefox Browser auf einem Windows Desktop Rechner: Mozilla / 5 . 0 ( Windows NT 6 . 1 ; Win64 ; x64 ; rv : 47 . 0 ) Gecko / 20100101 Firefox / 47 . 0 Um in PHP Browscap zu aktivieren, muss (1) die aktuelle Browscap ini-Datei heruntergeladen werden und (2) muss diese \u00fcber die php.ini eingebunden werden. Laden Sie dazu die entsprechende ini-Datei der Browscap Website herunter ( php_browscap.ini ). Legen Sie die Datei in das Verzeichnis C:\\php Referenzieren Sie die ini-Datei \u00fcber eine absolute Pfadangabe in der php.ini . \u00c4ndern Sie dazu die die php.ini an der entsprechenden Stelle folgend ab: [browscap] ; http://php.net/browscap browscap = C:/php/php_browscap.ini","title":"Browscap aktivieren"},{"location":"tutorials/03/#konfigurationsubersicht","text":"Um die Konfiguration einer PHP-Laufzeitumgebung einzusehen und zu pr\u00fcfen, biete PHP die Funktion phpinfo . Erstellen Sie eine Datei index.php innerhalb eines beliebigen Ordners. Der Inhalt der index.php soll folgenden Quellcode enthalten: <?php phpinfo (); Starten Sie einen lokalen Web-Server und \u00f6ffnen Sie die index.php Datei \u00fcber den Web-Browser. Es sollte eine Website erscheinen die dem Screenshot entspricht. Sie finden darauf alle Konfigurationen strukturiert aufgelistet, welche in der php.ini vorgenommen sind.","title":"Konfigurations\u00fcbersicht"},{"location":"tutorials/03/#haufige-probleme","text":"Falls der Web-Server gestartet ist, w\u00e4hrend eine Konfiguration ge\u00e4ndert wird, muss der Web-Server gestoppt und neu gestartet werden. F\u00fcr CLI-Skripte ist kein Neustart erforderlich.","title":"H\u00e4ufige Probleme"}]}